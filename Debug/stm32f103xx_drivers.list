
stm32f103xx_drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000878  08000130  08000130  00001130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000000c  080009a8  080009a8  000019a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080009b4  080009b4  000019c4  2**0
                  CONTENTS
  4 .ARM          00000008  080009b4  080009b4  000019b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080009bc  080009c4  000019c4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080009bc  080009bc  000019bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080009c0  080009c0  000019c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000000  20000000  20000000  000019c4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  080009c4  00002000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  080009c4  0000201c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000019c4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00000f6b  00000000  00000000  000019ed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000043a  00000000  00000000  00002958  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000140  00000000  00000000  00002d98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000000e4  00000000  00000000  00002ed8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00002228  00000000  00000000  00002fbc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000171e  00000000  00000000  000051e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00008eec  00000000  00000000  00006902  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0000f7ee  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000474  00000000  00000000  0000f834  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006f  00000000  00000000  0000fca8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	@ (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	@ (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	@ (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000000 	.word	0x20000000
 800014c:	00000000 	.word	0x00000000
 8000150:	08000990 	.word	0x08000990

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	@ (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	@ (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	@ (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000004 	.word	0x20000004
 800016c:	08000990 	.word	0x08000990

08000170 <strlen>:
 8000170:	4603      	mov	r3, r0
 8000172:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000176:	2a00      	cmp	r2, #0
 8000178:	d1fb      	bne.n	8000172 <strlen+0x2>
 800017a:	1a18      	subs	r0, r3, r0
 800017c:	3801      	subs	r0, #1
 800017e:	4770      	bx	lr

08000180 <SPI_BtnConfig>:
 *  PB13 --> SPI2_SCK
 *  PB14 --> SPI2_MISO // Don't need to configure for this task
 *  PB15 --> SPI2_MOSI
 *  Alternate function mode : Default
 */
void SPI_BtnConfig(void){
 8000180:	b580      	push	{r7, lr}
 8000182:	b084      	sub	sp, #16
 8000184:	af00      	add	r7, sp, #0
	GPIO_Handle_t gpio_btn;
	gpio_btn.pGPIOx = GPIOA;
 8000186:	4b09      	ldr	r3, [pc, #36]	@ (80001ac <SPI_BtnConfig+0x2c>)
 8000188:	607b      	str	r3, [r7, #4]
	gpio_btn.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_5;
 800018a:	2305      	movs	r3, #5
 800018c:	723b      	strb	r3, [r7, #8]
	gpio_btn.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_IT_FT;
 800018e:	2310      	movs	r3, #16
 8000190:	727b      	strb	r3, [r7, #9]
	GPIO_periClockControl(GPIOA, ENABLE);
 8000192:	2101      	movs	r1, #1
 8000194:	4805      	ldr	r0, [pc, #20]	@ (80001ac <SPI_BtnConfig+0x2c>)
 8000196:	f000 f8c1 	bl	800031c <GPIO_periClockControl>
	GPIO_init(&gpio_btn);
 800019a:	1d3b      	adds	r3, r7, #4
 800019c:	4618      	mov	r0, r3
 800019e:	f000 f975 	bl	800048c <GPIO_init>
}
 80001a2:	bf00      	nop
 80001a4:	3710      	adds	r7, #16
 80001a6:	46bd      	mov	sp, r7
 80001a8:	bd80      	pop	{r7, pc}
 80001aa:	bf00      	nop
 80001ac:	40010800 	.word	0x40010800

080001b0 <delay>:
void delay(void){
 80001b0:	b480      	push	{r7}
 80001b2:	b083      	sub	sp, #12
 80001b4:	af00      	add	r7, sp, #0
	for(int i=0 ; i<=600000; i++){
 80001b6:	2300      	movs	r3, #0
 80001b8:	607b      	str	r3, [r7, #4]
 80001ba:	e002      	b.n	80001c2 <delay+0x12>
 80001bc:	687b      	ldr	r3, [r7, #4]
 80001be:	3301      	adds	r3, #1
 80001c0:	607b      	str	r3, [r7, #4]
 80001c2:	687b      	ldr	r3, [r7, #4]
 80001c4:	4a04      	ldr	r2, [pc, #16]	@ (80001d8 <delay+0x28>)
 80001c6:	4293      	cmp	r3, r2
 80001c8:	ddf8      	ble.n	80001bc <delay+0xc>

	}
}
 80001ca:	bf00      	nop
 80001cc:	bf00      	nop
 80001ce:	370c      	adds	r7, #12
 80001d0:	46bd      	mov	sp, r7
 80001d2:	bc80      	pop	{r7}
 80001d4:	4770      	bx	lr
 80001d6:	bf00      	nop
 80001d8:	000927c0 	.word	0x000927c0

080001dc <main>:
int main(void){
 80001dc:	b580      	push	{r7, lr}
 80001de:	b08a      	sub	sp, #40	@ 0x28
 80001e0:	af00      	add	r7, sp, #0
	SPI_Handle_t spi2_tx;
	GPIO_Handle_t spi2_gpio;
	memset(&spi2_gpio, 0, sizeof(spi2_gpio));
 80001e2:	f107 0310 	add.w	r3, r7, #16
 80001e6:	220c      	movs	r2, #12
 80001e8:	2100      	movs	r1, #0
 80001ea:	4618      	mov	r0, r3
 80001ec:	f000 fba4 	bl	8000938 <memset>
	memset(&spi2_tx, 0, sizeof(spi2_tx));
 80001f0:	f107 031c 	add.w	r3, r7, #28
 80001f4:	220c      	movs	r2, #12
 80001f6:	2100      	movs	r1, #0
 80001f8:	4618      	mov	r0, r3
 80001fa:	f000 fb9d 	bl	8000938 <memset>
	char data[] = "Hello World";
 80001fe:	4a2e      	ldr	r2, [pc, #184]	@ (80002b8 <main+0xdc>)
 8000200:	1d3b      	adds	r3, r7, #4
 8000202:	ca07      	ldmia	r2, {r0, r1, r2}
 8000204:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	/*Configuring the button*/
	SPI_BtnConfig();
 8000208:	f7ff ffba 	bl	8000180 <SPI_BtnConfig>
	/*Configuring SPI2*/

	// Configuring the port and pins & Enabling Clock for PORTB
	spi2_gpio.pGPIOx = GPIOB;
 800020c:	4b2b      	ldr	r3, [pc, #172]	@ (80002bc <main+0xe0>)
 800020e:	613b      	str	r3, [r7, #16]
	spi2_gpio.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_AF_PP_10MHZ;
 8000210:	2309      	movs	r3, #9
 8000212:	757b      	strb	r3, [r7, #21]
	// For MOSI2
	spi2_gpio.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_15;
 8000214:	230f      	movs	r3, #15
 8000216:	753b      	strb	r3, [r7, #20]
	GPIO_init(&spi2_gpio);
 8000218:	f107 0310 	add.w	r3, r7, #16
 800021c:	4618      	mov	r0, r3
 800021e:	f000 f935 	bl	800048c <GPIO_init>
	// For SCLK2
	spi2_gpio.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_13;
 8000222:	230d      	movs	r3, #13
 8000224:	753b      	strb	r3, [r7, #20]
	GPIO_init(&spi2_gpio);
 8000226:	f107 0310 	add.w	r3, r7, #16
 800022a:	4618      	mov	r0, r3
 800022c:	f000 f92e 	bl	800048c <GPIO_init>
	// For MISO2
//	spi2_gpio.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_14;
//	GPIO_init(&spi2_gpio);
	// For NSS
	spi2_gpio.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_12;
 8000230:	230c      	movs	r3, #12
 8000232:	753b      	strb	r3, [r7, #20]
	GPIO_init(&spi2_gpio);
 8000234:	f107 0310 	add.w	r3, r7, #16
 8000238:	4618      	mov	r0, r3
 800023a:	f000 f927 	bl	800048c <GPIO_init>

	/*NOTE: first of all configure the base address of SPI2*/
	spi2_tx.pSPIx = SPI2;
 800023e:	4b20      	ldr	r3, [pc, #128]	@ (80002c0 <main+0xe4>)
 8000240:	61fb      	str	r3, [r7, #28]
	// 1. Configure the Master & Bus COnfiguration
	spi2_tx.SPIConfig.SPI_BusConfig = SPI_BUS_CONFIG_FD;
 8000242:	2301      	movs	r3, #1
 8000244:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
	spi2_tx.SPIConfig.SPI_DeviceMode = SPI_DEVICE_MODE_MASTER;
 8000248:	2301      	movs	r3, #1
 800024a:	f887 3020 	strb.w	r3, [r7, #32]
	// 2. Configure SCLK2 maximum
	spi2_tx.SPIConfig.SPI_SClkSpeed = SPI_SCLK_SPEED_DIV8;
 800024e:	2302      	movs	r3, #2
 8000250:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
	// 3. Configure the Data frame
	spi2_tx.SPIConfig.SPI_DFF = SPI_DFF_8BITS;
 8000254:	2300      	movs	r3, #0
 8000256:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
	// 4. Configure the clock polarity
	spi2_tx.SPIConfig.SPI_CPOL = SPI_CPOL_LOW;
 800025a:	2300      	movs	r3, #0
 800025c:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
	// 5. Configure the clock phase
	spi2_tx.SPIConfig.SPI_CPHA = SPI_CPHA_LOW;
 8000260:	2300      	movs	r3, #0
 8000262:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
	// 6. Configure the SSM
	spi2_tx.SPIConfig.SPI_SSM = SPI_SSM_DI;
 8000266:	2300      	movs	r3, #0
 8000268:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

	SPI_init(&spi2_tx);
 800026c:	f107 031c 	add.w	r3, r7, #28
 8000270:	4618      	mov	r0, r3
 8000272:	f000 fa8b 	bl	800078c <SPI_init>
	 * Making SSOE 1 does NSS output ENABLE
	 * The NSS pin is automatically managed by the hardware
	 * i.e. when SPE = 1, NSS will pulled to low
	 * and NSS will pulled to high when SPE = 0`
	 */
	SPI_SSOEConfig(SPI2, ENABLE);
 8000276:	2101      	movs	r1, #1
 8000278:	4811      	ldr	r0, [pc, #68]	@ (80002c0 <main+0xe4>)
 800027a:	f000 fb42 	bl	8000902 <SPI_SSOEConfig>
	while(1){
		// wait to press the button
		while(!GPIO_ReadFromInputPin(GPIOA, GPIO_PIN_5));
 800027e:	bf00      	nop
 8000280:	2105      	movs	r1, #5
 8000282:	4810      	ldr	r0, [pc, #64]	@ (80002c4 <main+0xe8>)
 8000284:	f000 fa14 	bl	80006b0 <GPIO_ReadFromInputPin>
 8000288:	4603      	mov	r3, r0
 800028a:	2b00      	cmp	r3, #0
 800028c:	d0f8      	beq.n	8000280 <main+0xa4>
		delay();
 800028e:	f7ff ff8f 	bl	80001b0 <delay>
		SPI_PeripheralControl(SPI2, ENABLE);
 8000292:	2101      	movs	r1, #1
 8000294:	480a      	ldr	r0, [pc, #40]	@ (80002c0 <main+0xe4>)
 8000296:	f000 fb19 	bl	80008cc <SPI_PeripheralControl>

		SPI_SendData(SPI2,(uint8_t *)data,strlen(data));
 800029a:	1d3b      	adds	r3, r7, #4
 800029c:	4618      	mov	r0, r3
 800029e:	f7ff ff67 	bl	8000170 <strlen>
 80002a2:	4602      	mov	r2, r0
 80002a4:	1d3b      	adds	r3, r7, #4
 80002a6:	4619      	mov	r1, r3
 80002a8:	4805      	ldr	r0, [pc, #20]	@ (80002c0 <main+0xe4>)
 80002aa:	f000 fac5 	bl	8000838 <SPI_SendData>

		SPI_PeripheralControl(SPI2, DISABLE);
 80002ae:	2100      	movs	r1, #0
 80002b0:	4803      	ldr	r0, [pc, #12]	@ (80002c0 <main+0xe4>)
 80002b2:	f000 fb0b 	bl	80008cc <SPI_PeripheralControl>
		while(!GPIO_ReadFromInputPin(GPIOA, GPIO_PIN_5));
 80002b6:	e7e2      	b.n	800027e <main+0xa2>
 80002b8:	080009a8 	.word	0x080009a8
 80002bc:	40010c00 	.word	0x40010c00
 80002c0:	40003800 	.word	0x40003800
 80002c4:	40010800 	.word	0x40010800

080002c8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80002c8:	480d      	ldr	r0, [pc, #52]	@ (8000300 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80002ca:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80002cc:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80002d0:	480c      	ldr	r0, [pc, #48]	@ (8000304 <LoopForever+0x6>)
  ldr r1, =_edata
 80002d2:	490d      	ldr	r1, [pc, #52]	@ (8000308 <LoopForever+0xa>)
  ldr r2, =_sidata
 80002d4:	4a0d      	ldr	r2, [pc, #52]	@ (800030c <LoopForever+0xe>)
  movs r3, #0
 80002d6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80002d8:	e002      	b.n	80002e0 <LoopCopyDataInit>

080002da <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80002da:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80002dc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80002de:	3304      	adds	r3, #4

080002e0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80002e0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80002e2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80002e4:	d3f9      	bcc.n	80002da <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80002e6:	4a0a      	ldr	r2, [pc, #40]	@ (8000310 <LoopForever+0x12>)
  ldr r4, =_ebss
 80002e8:	4c0a      	ldr	r4, [pc, #40]	@ (8000314 <LoopForever+0x16>)
  movs r3, #0
 80002ea:	2300      	movs	r3, #0
  b LoopFillZerobss
 80002ec:	e001      	b.n	80002f2 <LoopFillZerobss>

080002ee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80002ee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80002f0:	3204      	adds	r2, #4

080002f2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80002f2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80002f4:	d3fb      	bcc.n	80002ee <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80002f6:	f000 fb27 	bl	8000948 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80002fa:	f7ff ff6f 	bl	80001dc <main>

080002fe <LoopForever>:

LoopForever:
  b LoopForever
 80002fe:	e7fe      	b.n	80002fe <LoopForever>
  ldr   r0, =_estack
 8000300:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 8000304:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000308:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 800030c:	080009c4 	.word	0x080009c4
  ldr r2, =_sbss
 8000310:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000314:	2000001c 	.word	0x2000001c

08000318 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000318:	e7fe      	b.n	8000318 <ADC1_2_IRQHandler>
	...

0800031c <GPIO_periClockControl>:
 * @return            -  none
 *
 * @Note              -  none

 */
void GPIO_periClockControl(GPIO_RegDef_t *pGPIOx, uint8_t EnorDi){
 800031c:	b480      	push	{r7}
 800031e:	b083      	sub	sp, #12
 8000320:	af00      	add	r7, sp, #0
 8000322:	6078      	str	r0, [r7, #4]
 8000324:	460b      	mov	r3, r1
 8000326:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == ENABLE){
 8000328:	78fb      	ldrb	r3, [r7, #3]
 800032a:	2b01      	cmp	r3, #1
 800032c:	d14c      	bne.n	80003c8 <GPIO_periClockControl+0xac>
		if(pGPIOx == GPIOA){
 800032e:	687b      	ldr	r3, [r7, #4]
 8000330:	4a4e      	ldr	r2, [pc, #312]	@ (800046c <GPIO_periClockControl+0x150>)
 8000332:	4293      	cmp	r3, r2
 8000334:	d106      	bne.n	8000344 <GPIO_periClockControl+0x28>
			GPIOA_PCLK_EN();
 8000336:	4b4e      	ldr	r3, [pc, #312]	@ (8000470 <GPIO_periClockControl+0x154>)
 8000338:	699b      	ldr	r3, [r3, #24]
 800033a:	4a4d      	ldr	r2, [pc, #308]	@ (8000470 <GPIO_periClockControl+0x154>)
 800033c:	f043 0304 	orr.w	r3, r3, #4
 8000340:	6193      	str	r3, [r2, #24]
		}
		else if(pGPIOx == GPIOG){
			GPIOG_PCLK_DI();
		}
	}
}
 8000342:	e08d      	b.n	8000460 <GPIO_periClockControl+0x144>
		else if(pGPIOx == GPIOB){
 8000344:	687b      	ldr	r3, [r7, #4]
 8000346:	4a4b      	ldr	r2, [pc, #300]	@ (8000474 <GPIO_periClockControl+0x158>)
 8000348:	4293      	cmp	r3, r2
 800034a:	d106      	bne.n	800035a <GPIO_periClockControl+0x3e>
			GPIOB_PCLK_EN();
 800034c:	4b48      	ldr	r3, [pc, #288]	@ (8000470 <GPIO_periClockControl+0x154>)
 800034e:	699b      	ldr	r3, [r3, #24]
 8000350:	4a47      	ldr	r2, [pc, #284]	@ (8000470 <GPIO_periClockControl+0x154>)
 8000352:	f043 0308 	orr.w	r3, r3, #8
 8000356:	6193      	str	r3, [r2, #24]
}
 8000358:	e082      	b.n	8000460 <GPIO_periClockControl+0x144>
		else if(pGPIOx == GPIOC){
 800035a:	687b      	ldr	r3, [r7, #4]
 800035c:	4a46      	ldr	r2, [pc, #280]	@ (8000478 <GPIO_periClockControl+0x15c>)
 800035e:	4293      	cmp	r3, r2
 8000360:	d106      	bne.n	8000370 <GPIO_periClockControl+0x54>
			GPIOC_PCLK_EN();
 8000362:	4b43      	ldr	r3, [pc, #268]	@ (8000470 <GPIO_periClockControl+0x154>)
 8000364:	699b      	ldr	r3, [r3, #24]
 8000366:	4a42      	ldr	r2, [pc, #264]	@ (8000470 <GPIO_periClockControl+0x154>)
 8000368:	f043 0310 	orr.w	r3, r3, #16
 800036c:	6193      	str	r3, [r2, #24]
}
 800036e:	e077      	b.n	8000460 <GPIO_periClockControl+0x144>
		else if(pGPIOx == GPIOD){
 8000370:	687b      	ldr	r3, [r7, #4]
 8000372:	4a42      	ldr	r2, [pc, #264]	@ (800047c <GPIO_periClockControl+0x160>)
 8000374:	4293      	cmp	r3, r2
 8000376:	d106      	bne.n	8000386 <GPIO_periClockControl+0x6a>
			GPIOD_PCLK_EN();
 8000378:	4b3d      	ldr	r3, [pc, #244]	@ (8000470 <GPIO_periClockControl+0x154>)
 800037a:	699b      	ldr	r3, [r3, #24]
 800037c:	4a3c      	ldr	r2, [pc, #240]	@ (8000470 <GPIO_periClockControl+0x154>)
 800037e:	f043 0320 	orr.w	r3, r3, #32
 8000382:	6193      	str	r3, [r2, #24]
}
 8000384:	e06c      	b.n	8000460 <GPIO_periClockControl+0x144>
		else if(pGPIOx == GPIOE){
 8000386:	687b      	ldr	r3, [r7, #4]
 8000388:	4a3d      	ldr	r2, [pc, #244]	@ (8000480 <GPIO_periClockControl+0x164>)
 800038a:	4293      	cmp	r3, r2
 800038c:	d106      	bne.n	800039c <GPIO_periClockControl+0x80>
			GPIOE_PCLK_EN();
 800038e:	4b38      	ldr	r3, [pc, #224]	@ (8000470 <GPIO_periClockControl+0x154>)
 8000390:	699b      	ldr	r3, [r3, #24]
 8000392:	4a37      	ldr	r2, [pc, #220]	@ (8000470 <GPIO_periClockControl+0x154>)
 8000394:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000398:	6193      	str	r3, [r2, #24]
}
 800039a:	e061      	b.n	8000460 <GPIO_periClockControl+0x144>
		else if(pGPIOx == GPIOF){
 800039c:	687b      	ldr	r3, [r7, #4]
 800039e:	4a39      	ldr	r2, [pc, #228]	@ (8000484 <GPIO_periClockControl+0x168>)
 80003a0:	4293      	cmp	r3, r2
 80003a2:	d106      	bne.n	80003b2 <GPIO_periClockControl+0x96>
			GPIOF_PCLK_EN();
 80003a4:	4b32      	ldr	r3, [pc, #200]	@ (8000470 <GPIO_periClockControl+0x154>)
 80003a6:	699b      	ldr	r3, [r3, #24]
 80003a8:	4a31      	ldr	r2, [pc, #196]	@ (8000470 <GPIO_periClockControl+0x154>)
 80003aa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80003ae:	6193      	str	r3, [r2, #24]
}
 80003b0:	e056      	b.n	8000460 <GPIO_periClockControl+0x144>
		else if(pGPIOx == GPIOG){
 80003b2:	687b      	ldr	r3, [r7, #4]
 80003b4:	4a34      	ldr	r2, [pc, #208]	@ (8000488 <GPIO_periClockControl+0x16c>)
 80003b6:	4293      	cmp	r3, r2
 80003b8:	d152      	bne.n	8000460 <GPIO_periClockControl+0x144>
			GPIOG_PCLK_EN();
 80003ba:	4b2d      	ldr	r3, [pc, #180]	@ (8000470 <GPIO_periClockControl+0x154>)
 80003bc:	699b      	ldr	r3, [r3, #24]
 80003be:	4a2c      	ldr	r2, [pc, #176]	@ (8000470 <GPIO_periClockControl+0x154>)
 80003c0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80003c4:	6193      	str	r3, [r2, #24]
}
 80003c6:	e04b      	b.n	8000460 <GPIO_periClockControl+0x144>
		if(pGPIOx == GPIOA){
 80003c8:	687b      	ldr	r3, [r7, #4]
 80003ca:	4a28      	ldr	r2, [pc, #160]	@ (800046c <GPIO_periClockControl+0x150>)
 80003cc:	4293      	cmp	r3, r2
 80003ce:	d106      	bne.n	80003de <GPIO_periClockControl+0xc2>
			GPIOA_PCLK_DI();
 80003d0:	4b27      	ldr	r3, [pc, #156]	@ (8000470 <GPIO_periClockControl+0x154>)
 80003d2:	699b      	ldr	r3, [r3, #24]
 80003d4:	4a26      	ldr	r2, [pc, #152]	@ (8000470 <GPIO_periClockControl+0x154>)
 80003d6:	f023 0304 	bic.w	r3, r3, #4
 80003da:	6193      	str	r3, [r2, #24]
}
 80003dc:	e040      	b.n	8000460 <GPIO_periClockControl+0x144>
		else if(pGPIOx == GPIOB){
 80003de:	687b      	ldr	r3, [r7, #4]
 80003e0:	4a24      	ldr	r2, [pc, #144]	@ (8000474 <GPIO_periClockControl+0x158>)
 80003e2:	4293      	cmp	r3, r2
 80003e4:	d106      	bne.n	80003f4 <GPIO_periClockControl+0xd8>
			GPIOB_PCLK_DI();
 80003e6:	4b22      	ldr	r3, [pc, #136]	@ (8000470 <GPIO_periClockControl+0x154>)
 80003e8:	699b      	ldr	r3, [r3, #24]
 80003ea:	4a21      	ldr	r2, [pc, #132]	@ (8000470 <GPIO_periClockControl+0x154>)
 80003ec:	f023 0308 	bic.w	r3, r3, #8
 80003f0:	6193      	str	r3, [r2, #24]
}
 80003f2:	e035      	b.n	8000460 <GPIO_periClockControl+0x144>
		else if(pGPIOx == GPIOC){
 80003f4:	687b      	ldr	r3, [r7, #4]
 80003f6:	4a20      	ldr	r2, [pc, #128]	@ (8000478 <GPIO_periClockControl+0x15c>)
 80003f8:	4293      	cmp	r3, r2
 80003fa:	d106      	bne.n	800040a <GPIO_periClockControl+0xee>
			GPIOC_PCLK_DI();
 80003fc:	4b1c      	ldr	r3, [pc, #112]	@ (8000470 <GPIO_periClockControl+0x154>)
 80003fe:	699b      	ldr	r3, [r3, #24]
 8000400:	4a1b      	ldr	r2, [pc, #108]	@ (8000470 <GPIO_periClockControl+0x154>)
 8000402:	f023 0310 	bic.w	r3, r3, #16
 8000406:	6193      	str	r3, [r2, #24]
}
 8000408:	e02a      	b.n	8000460 <GPIO_periClockControl+0x144>
		else if(pGPIOx == GPIOD){
 800040a:	687b      	ldr	r3, [r7, #4]
 800040c:	4a1b      	ldr	r2, [pc, #108]	@ (800047c <GPIO_periClockControl+0x160>)
 800040e:	4293      	cmp	r3, r2
 8000410:	d106      	bne.n	8000420 <GPIO_periClockControl+0x104>
			GPIOD_PCLK_DI();
 8000412:	4b17      	ldr	r3, [pc, #92]	@ (8000470 <GPIO_periClockControl+0x154>)
 8000414:	699b      	ldr	r3, [r3, #24]
 8000416:	4a16      	ldr	r2, [pc, #88]	@ (8000470 <GPIO_periClockControl+0x154>)
 8000418:	f023 0320 	bic.w	r3, r3, #32
 800041c:	6193      	str	r3, [r2, #24]
}
 800041e:	e01f      	b.n	8000460 <GPIO_periClockControl+0x144>
		else if(pGPIOx == GPIOE){
 8000420:	687b      	ldr	r3, [r7, #4]
 8000422:	4a17      	ldr	r2, [pc, #92]	@ (8000480 <GPIO_periClockControl+0x164>)
 8000424:	4293      	cmp	r3, r2
 8000426:	d106      	bne.n	8000436 <GPIO_periClockControl+0x11a>
			GPIOE_PCLK_DI();
 8000428:	4b11      	ldr	r3, [pc, #68]	@ (8000470 <GPIO_periClockControl+0x154>)
 800042a:	699b      	ldr	r3, [r3, #24]
 800042c:	4a10      	ldr	r2, [pc, #64]	@ (8000470 <GPIO_periClockControl+0x154>)
 800042e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8000432:	6193      	str	r3, [r2, #24]
}
 8000434:	e014      	b.n	8000460 <GPIO_periClockControl+0x144>
		else if(pGPIOx == GPIOF){
 8000436:	687b      	ldr	r3, [r7, #4]
 8000438:	4a12      	ldr	r2, [pc, #72]	@ (8000484 <GPIO_periClockControl+0x168>)
 800043a:	4293      	cmp	r3, r2
 800043c:	d106      	bne.n	800044c <GPIO_periClockControl+0x130>
			GPIOF_PCLK_DI();
 800043e:	4b0c      	ldr	r3, [pc, #48]	@ (8000470 <GPIO_periClockControl+0x154>)
 8000440:	699b      	ldr	r3, [r3, #24]
 8000442:	4a0b      	ldr	r2, [pc, #44]	@ (8000470 <GPIO_periClockControl+0x154>)
 8000444:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8000448:	6193      	str	r3, [r2, #24]
}
 800044a:	e009      	b.n	8000460 <GPIO_periClockControl+0x144>
		else if(pGPIOx == GPIOG){
 800044c:	687b      	ldr	r3, [r7, #4]
 800044e:	4a0e      	ldr	r2, [pc, #56]	@ (8000488 <GPIO_periClockControl+0x16c>)
 8000450:	4293      	cmp	r3, r2
 8000452:	d105      	bne.n	8000460 <GPIO_periClockControl+0x144>
			GPIOG_PCLK_DI();
 8000454:	4b06      	ldr	r3, [pc, #24]	@ (8000470 <GPIO_periClockControl+0x154>)
 8000456:	699b      	ldr	r3, [r3, #24]
 8000458:	4a05      	ldr	r2, [pc, #20]	@ (8000470 <GPIO_periClockControl+0x154>)
 800045a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800045e:	6193      	str	r3, [r2, #24]
}
 8000460:	bf00      	nop
 8000462:	370c      	adds	r7, #12
 8000464:	46bd      	mov	sp, r7
 8000466:	bc80      	pop	{r7}
 8000468:	4770      	bx	lr
 800046a:	bf00      	nop
 800046c:	40010800 	.word	0x40010800
 8000470:	40021000 	.word	0x40021000
 8000474:	40010c00 	.word	0x40010c00
 8000478:	40011000 	.word	0x40011000
 800047c:	40011400 	.word	0x40011400
 8000480:	40011800 	.word	0x40011800
 8000484:	40011c00 	.word	0x40011c00
 8000488:	40012000 	.word	0x40012000

0800048c <GPIO_init>:
 *
 * @Note              -

 */

void GPIO_init(GPIO_Handle_t *pGPIOHandle){
 800048c:	b580      	push	{r7, lr}
 800048e:	b084      	sub	sp, #16
 8000490:	af00      	add	r7, sp, #0
 8000492:	6078      	str	r0, [r7, #4]
	// Enabling the Peripheral Clock
	GPIO_periClockControl(pGPIOHandle->pGPIOx, ENABLE);
 8000494:	687b      	ldr	r3, [r7, #4]
 8000496:	681b      	ldr	r3, [r3, #0]
 8000498:	2101      	movs	r1, #1
 800049a:	4618      	mov	r0, r3
 800049c:	f7ff ff3e 	bl	800031c <GPIO_periClockControl>
	uint32_t temp = 0;
 80004a0:	2300      	movs	r3, #0
 80004a2:	60fb      	str	r3, [r7, #12]
	// 1. configure the mode of GPIO Pin
	// 2. configure the speed
	// 3. configure pull up pull down settings
	// 4. configure the output type
	// 5. configure the alternate functionality
	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_AF_OD_50MHZ){
 80004a4:	687b      	ldr	r3, [r7, #4]
 80004a6:	795b      	ldrb	r3, [r3, #5]
 80004a8:	2b0f      	cmp	r3, #15
 80004aa:	d847      	bhi.n	800053c <GPIO_init+0xb0>
		if (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber <= 7){
 80004ac:	687b      	ldr	r3, [r7, #4]
 80004ae:	791b      	ldrb	r3, [r3, #4]
 80004b0:	2b07      	cmp	r3, #7
 80004b2:	d820      	bhi.n	80004f6 <GPIO_init+0x6a>
			temp =	(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode	<< (4*pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 80004b4:	687b      	ldr	r3, [r7, #4]
 80004b6:	795b      	ldrb	r3, [r3, #5]
 80004b8:	461a      	mov	r2, r3
 80004ba:	687b      	ldr	r3, [r7, #4]
 80004bc:	791b      	ldrb	r3, [r3, #4]
 80004be:	009b      	lsls	r3, r3, #2
 80004c0:	fa02 f303 	lsl.w	r3, r2, r3
 80004c4:	60fb      	str	r3, [r7, #12]
			pGPIOHandle->pGPIOx->CRL &= ~(0xF << (4* (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)));
 80004c6:	687b      	ldr	r3, [r7, #4]
 80004c8:	681b      	ldr	r3, [r3, #0]
 80004ca:	681a      	ldr	r2, [r3, #0]
 80004cc:	687b      	ldr	r3, [r7, #4]
 80004ce:	791b      	ldrb	r3, [r3, #4]
 80004d0:	009b      	lsls	r3, r3, #2
 80004d2:	210f      	movs	r1, #15
 80004d4:	fa01 f303 	lsl.w	r3, r1, r3
 80004d8:	43db      	mvns	r3, r3
 80004da:	4619      	mov	r1, r3
 80004dc:	687b      	ldr	r3, [r7, #4]
 80004de:	681b      	ldr	r3, [r3, #0]
 80004e0:	400a      	ands	r2, r1
 80004e2:	601a      	str	r2, [r3, #0]
			pGPIOHandle->pGPIOx->CRL |= temp;
 80004e4:	687b      	ldr	r3, [r7, #4]
 80004e6:	681b      	ldr	r3, [r3, #0]
 80004e8:	6819      	ldr	r1, [r3, #0]
 80004ea:	687b      	ldr	r3, [r7, #4]
 80004ec:	681b      	ldr	r3, [r3, #0]
 80004ee:	68fa      	ldr	r2, [r7, #12]
 80004f0:	430a      	orrs	r2, r1
 80004f2:	601a      	str	r2, [r3, #0]
		uint8_t portcode = GPIO_BASEADDR_TO_CODE(pGPIOHandle->pGPIOx);
		AFIO->EXTICR[temp1] = portcode << (temp2*4);
		}


}
 80004f4:	e0c6      	b.n	8000684 <GPIO_init+0x1f8>
			temp =	(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode	<< (4* (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber - 8 )));
 80004f6:	687b      	ldr	r3, [r7, #4]
 80004f8:	795b      	ldrb	r3, [r3, #5]
 80004fa:	461a      	mov	r2, r3
 80004fc:	687b      	ldr	r3, [r7, #4]
 80004fe:	791b      	ldrb	r3, [r3, #4]
 8000500:	3b08      	subs	r3, #8
 8000502:	009b      	lsls	r3, r3, #2
 8000504:	fa02 f303 	lsl.w	r3, r2, r3
 8000508:	60fb      	str	r3, [r7, #12]
			pGPIOHandle->pGPIOx->CRH &= ~(0xF << (4* (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber - 8 )));
 800050a:	687b      	ldr	r3, [r7, #4]
 800050c:	681b      	ldr	r3, [r3, #0]
 800050e:	685a      	ldr	r2, [r3, #4]
 8000510:	687b      	ldr	r3, [r7, #4]
 8000512:	791b      	ldrb	r3, [r3, #4]
 8000514:	3b08      	subs	r3, #8
 8000516:	009b      	lsls	r3, r3, #2
 8000518:	210f      	movs	r1, #15
 800051a:	fa01 f303 	lsl.w	r3, r1, r3
 800051e:	43db      	mvns	r3, r3
 8000520:	4619      	mov	r1, r3
 8000522:	687b      	ldr	r3, [r7, #4]
 8000524:	681b      	ldr	r3, [r3, #0]
 8000526:	400a      	ands	r2, r1
 8000528:	605a      	str	r2, [r3, #4]
			pGPIOHandle->pGPIOx->CRH |= temp;
 800052a:	687b      	ldr	r3, [r7, #4]
 800052c:	681b      	ldr	r3, [r3, #0]
 800052e:	6859      	ldr	r1, [r3, #4]
 8000530:	687b      	ldr	r3, [r7, #4]
 8000532:	681b      	ldr	r3, [r3, #0]
 8000534:	68fa      	ldr	r2, [r7, #12]
 8000536:	430a      	orrs	r2, r1
 8000538:	605a      	str	r2, [r3, #4]
}
 800053a:	e0a3      	b.n	8000684 <GPIO_init+0x1f8>
		if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_FT){
 800053c:	687b      	ldr	r3, [r7, #4]
 800053e:	795b      	ldrb	r3, [r3, #5]
 8000540:	2b10      	cmp	r3, #16
 8000542:	d117      	bne.n	8000574 <GPIO_init+0xe8>
			EXTI->FTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000544:	4b51      	ldr	r3, [pc, #324]	@ (800068c <GPIO_init+0x200>)
 8000546:	68db      	ldr	r3, [r3, #12]
 8000548:	687a      	ldr	r2, [r7, #4]
 800054a:	7912      	ldrb	r2, [r2, #4]
 800054c:	4611      	mov	r1, r2
 800054e:	2201      	movs	r2, #1
 8000550:	408a      	lsls	r2, r1
 8000552:	4611      	mov	r1, r2
 8000554:	4a4d      	ldr	r2, [pc, #308]	@ (800068c <GPIO_init+0x200>)
 8000556:	430b      	orrs	r3, r1
 8000558:	60d3      	str	r3, [r2, #12]
			EXTI->RTSR &= ~(1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800055a:	4b4c      	ldr	r3, [pc, #304]	@ (800068c <GPIO_init+0x200>)
 800055c:	689b      	ldr	r3, [r3, #8]
 800055e:	687a      	ldr	r2, [r7, #4]
 8000560:	7912      	ldrb	r2, [r2, #4]
 8000562:	4611      	mov	r1, r2
 8000564:	2201      	movs	r2, #1
 8000566:	408a      	lsls	r2, r1
 8000568:	43d2      	mvns	r2, r2
 800056a:	4611      	mov	r1, r2
 800056c:	4a47      	ldr	r2, [pc, #284]	@ (800068c <GPIO_init+0x200>)
 800056e:	400b      	ands	r3, r1
 8000570:	6093      	str	r3, [r2, #8]
 8000572:	e035      	b.n	80005e0 <GPIO_init+0x154>
		else if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RT){
 8000574:	687b      	ldr	r3, [r7, #4]
 8000576:	795b      	ldrb	r3, [r3, #5]
 8000578:	2b11      	cmp	r3, #17
 800057a:	d117      	bne.n	80005ac <GPIO_init+0x120>
			EXTI->RTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800057c:	4b43      	ldr	r3, [pc, #268]	@ (800068c <GPIO_init+0x200>)
 800057e:	689b      	ldr	r3, [r3, #8]
 8000580:	687a      	ldr	r2, [r7, #4]
 8000582:	7912      	ldrb	r2, [r2, #4]
 8000584:	4611      	mov	r1, r2
 8000586:	2201      	movs	r2, #1
 8000588:	408a      	lsls	r2, r1
 800058a:	4611      	mov	r1, r2
 800058c:	4a3f      	ldr	r2, [pc, #252]	@ (800068c <GPIO_init+0x200>)
 800058e:	430b      	orrs	r3, r1
 8000590:	6093      	str	r3, [r2, #8]
			EXTI->FTSR &= ~(1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000592:	4b3e      	ldr	r3, [pc, #248]	@ (800068c <GPIO_init+0x200>)
 8000594:	68db      	ldr	r3, [r3, #12]
 8000596:	687a      	ldr	r2, [r7, #4]
 8000598:	7912      	ldrb	r2, [r2, #4]
 800059a:	4611      	mov	r1, r2
 800059c:	2201      	movs	r2, #1
 800059e:	408a      	lsls	r2, r1
 80005a0:	43d2      	mvns	r2, r2
 80005a2:	4611      	mov	r1, r2
 80005a4:	4a39      	ldr	r2, [pc, #228]	@ (800068c <GPIO_init+0x200>)
 80005a6:	400b      	ands	r3, r1
 80005a8:	60d3      	str	r3, [r2, #12]
 80005aa:	e019      	b.n	80005e0 <GPIO_init+0x154>
		else if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RFT){
 80005ac:	687b      	ldr	r3, [r7, #4]
 80005ae:	795b      	ldrb	r3, [r3, #5]
 80005b0:	2b12      	cmp	r3, #18
 80005b2:	d115      	bne.n	80005e0 <GPIO_init+0x154>
			EXTI->FTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80005b4:	4b35      	ldr	r3, [pc, #212]	@ (800068c <GPIO_init+0x200>)
 80005b6:	68db      	ldr	r3, [r3, #12]
 80005b8:	687a      	ldr	r2, [r7, #4]
 80005ba:	7912      	ldrb	r2, [r2, #4]
 80005bc:	4611      	mov	r1, r2
 80005be:	2201      	movs	r2, #1
 80005c0:	408a      	lsls	r2, r1
 80005c2:	4611      	mov	r1, r2
 80005c4:	4a31      	ldr	r2, [pc, #196]	@ (800068c <GPIO_init+0x200>)
 80005c6:	430b      	orrs	r3, r1
 80005c8:	60d3      	str	r3, [r2, #12]
			EXTI->RTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80005ca:	4b30      	ldr	r3, [pc, #192]	@ (800068c <GPIO_init+0x200>)
 80005cc:	689b      	ldr	r3, [r3, #8]
 80005ce:	687a      	ldr	r2, [r7, #4]
 80005d0:	7912      	ldrb	r2, [r2, #4]
 80005d2:	4611      	mov	r1, r2
 80005d4:	2201      	movs	r2, #1
 80005d6:	408a      	lsls	r2, r1
 80005d8:	4611      	mov	r1, r2
 80005da:	4a2c      	ldr	r2, [pc, #176]	@ (800068c <GPIO_init+0x200>)
 80005dc:	430b      	orrs	r3, r1
 80005de:	6093      	str	r3, [r2, #8]
		EXTI->IMR |= 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber;
 80005e0:	4b2a      	ldr	r3, [pc, #168]	@ (800068c <GPIO_init+0x200>)
 80005e2:	681b      	ldr	r3, [r3, #0]
 80005e4:	687a      	ldr	r2, [r7, #4]
 80005e6:	7912      	ldrb	r2, [r2, #4]
 80005e8:	4611      	mov	r1, r2
 80005ea:	2201      	movs	r2, #1
 80005ec:	408a      	lsls	r2, r1
 80005ee:	4611      	mov	r1, r2
 80005f0:	4a26      	ldr	r2, [pc, #152]	@ (800068c <GPIO_init+0x200>)
 80005f2:	430b      	orrs	r3, r1
 80005f4:	6013      	str	r3, [r2, #0]
		temp1 = (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)/4; //Logic
 80005f6:	687b      	ldr	r3, [r7, #4]
 80005f8:	791b      	ldrb	r3, [r3, #4]
 80005fa:	089b      	lsrs	r3, r3, #2
 80005fc:	72fb      	strb	r3, [r7, #11]
		temp2 = (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)%4;
 80005fe:	687b      	ldr	r3, [r7, #4]
 8000600:	791b      	ldrb	r3, [r3, #4]
 8000602:	f003 0303 	and.w	r3, r3, #3
 8000606:	72bb      	strb	r3, [r7, #10]
		uint8_t portcode = GPIO_BASEADDR_TO_CODE(pGPIOHandle->pGPIOx);
 8000608:	687b      	ldr	r3, [r7, #4]
 800060a:	681b      	ldr	r3, [r3, #0]
 800060c:	4a20      	ldr	r2, [pc, #128]	@ (8000690 <GPIO_init+0x204>)
 800060e:	4293      	cmp	r3, r2
 8000610:	d02b      	beq.n	800066a <GPIO_init+0x1de>
 8000612:	687b      	ldr	r3, [r7, #4]
 8000614:	681b      	ldr	r3, [r3, #0]
 8000616:	4a1f      	ldr	r2, [pc, #124]	@ (8000694 <GPIO_init+0x208>)
 8000618:	4293      	cmp	r3, r2
 800061a:	d024      	beq.n	8000666 <GPIO_init+0x1da>
 800061c:	687b      	ldr	r3, [r7, #4]
 800061e:	681b      	ldr	r3, [r3, #0]
 8000620:	4a1d      	ldr	r2, [pc, #116]	@ (8000698 <GPIO_init+0x20c>)
 8000622:	4293      	cmp	r3, r2
 8000624:	d01d      	beq.n	8000662 <GPIO_init+0x1d6>
 8000626:	687b      	ldr	r3, [r7, #4]
 8000628:	681b      	ldr	r3, [r3, #0]
 800062a:	4a1c      	ldr	r2, [pc, #112]	@ (800069c <GPIO_init+0x210>)
 800062c:	4293      	cmp	r3, r2
 800062e:	d016      	beq.n	800065e <GPIO_init+0x1d2>
 8000630:	687b      	ldr	r3, [r7, #4]
 8000632:	681b      	ldr	r3, [r3, #0]
 8000634:	4a1a      	ldr	r2, [pc, #104]	@ (80006a0 <GPIO_init+0x214>)
 8000636:	4293      	cmp	r3, r2
 8000638:	d00f      	beq.n	800065a <GPIO_init+0x1ce>
 800063a:	687b      	ldr	r3, [r7, #4]
 800063c:	681b      	ldr	r3, [r3, #0]
 800063e:	4a19      	ldr	r2, [pc, #100]	@ (80006a4 <GPIO_init+0x218>)
 8000640:	4293      	cmp	r3, r2
 8000642:	d008      	beq.n	8000656 <GPIO_init+0x1ca>
 8000644:	687b      	ldr	r3, [r7, #4]
 8000646:	681b      	ldr	r3, [r3, #0]
 8000648:	4a17      	ldr	r2, [pc, #92]	@ (80006a8 <GPIO_init+0x21c>)
 800064a:	4293      	cmp	r3, r2
 800064c:	d101      	bne.n	8000652 <GPIO_init+0x1c6>
 800064e:	2306      	movs	r3, #6
 8000650:	e00c      	b.n	800066c <GPIO_init+0x1e0>
 8000652:	2300      	movs	r3, #0
 8000654:	e00a      	b.n	800066c <GPIO_init+0x1e0>
 8000656:	2305      	movs	r3, #5
 8000658:	e008      	b.n	800066c <GPIO_init+0x1e0>
 800065a:	2304      	movs	r3, #4
 800065c:	e006      	b.n	800066c <GPIO_init+0x1e0>
 800065e:	2303      	movs	r3, #3
 8000660:	e004      	b.n	800066c <GPIO_init+0x1e0>
 8000662:	2302      	movs	r3, #2
 8000664:	e002      	b.n	800066c <GPIO_init+0x1e0>
 8000666:	2301      	movs	r3, #1
 8000668:	e000      	b.n	800066c <GPIO_init+0x1e0>
 800066a:	2300      	movs	r3, #0
 800066c:	727b      	strb	r3, [r7, #9]
		AFIO->EXTICR[temp1] = portcode << (temp2*4);
 800066e:	7a7a      	ldrb	r2, [r7, #9]
 8000670:	7abb      	ldrb	r3, [r7, #10]
 8000672:	009b      	lsls	r3, r3, #2
 8000674:	fa02 f103 	lsl.w	r1, r2, r3
 8000678:	4a0c      	ldr	r2, [pc, #48]	@ (80006ac <GPIO_init+0x220>)
 800067a:	7afb      	ldrb	r3, [r7, #11]
 800067c:	3302      	adds	r3, #2
 800067e:	009b      	lsls	r3, r3, #2
 8000680:	4413      	add	r3, r2
 8000682:	6059      	str	r1, [r3, #4]
}
 8000684:	bf00      	nop
 8000686:	3710      	adds	r7, #16
 8000688:	46bd      	mov	sp, r7
 800068a:	bd80      	pop	{r7, pc}
 800068c:	40010400 	.word	0x40010400
 8000690:	40010800 	.word	0x40010800
 8000694:	40010c00 	.word	0x40010c00
 8000698:	40011000 	.word	0x40011000
 800069c:	40011400 	.word	0x40011400
 80006a0:	40011800 	.word	0x40011800
 80006a4:	40011c00 	.word	0x40011c00
 80006a8:	40012000 	.word	0x40012000
 80006ac:	40010000 	.word	0x40010000

080006b0 <GPIO_ReadFromInputPin>:
 *
 * @Note              -

 */

uint8_t GPIO_ReadFromInputPin(GPIO_RegDef_t *pGPIOx, uint8_t PinNumber){
 80006b0:	b480      	push	{r7}
 80006b2:	b085      	sub	sp, #20
 80006b4:	af00      	add	r7, sp, #0
 80006b6:	6078      	str	r0, [r7, #4]
 80006b8:	460b      	mov	r3, r1
 80006ba:	70fb      	strb	r3, [r7, #3]
	uint8_t value;
	value = (uint8_t)((pGPIOx->IDR >> PinNumber) & 0x00000001);
 80006bc:	687b      	ldr	r3, [r7, #4]
 80006be:	689a      	ldr	r2, [r3, #8]
 80006c0:	78fb      	ldrb	r3, [r7, #3]
 80006c2:	fa22 f303 	lsr.w	r3, r2, r3
 80006c6:	b2db      	uxtb	r3, r3
 80006c8:	f003 0301 	and.w	r3, r3, #1
 80006cc:	73fb      	strb	r3, [r7, #15]
	return value;
 80006ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80006d0:	4618      	mov	r0, r3
 80006d2:	3714      	adds	r7, #20
 80006d4:	46bd      	mov	sp, r7
 80006d6:	bc80      	pop	{r7}
 80006d8:	4770      	bx	lr
	...

080006dc <SPI_periClockControl>:
 * @return            -  none
 *
 * @Note              -  none

 */
void SPI_periClockControl(SPI_RegDef_t *pSPIx, uint8_t EnorDi){
 80006dc:	b480      	push	{r7}
 80006de:	b083      	sub	sp, #12
 80006e0:	af00      	add	r7, sp, #0
 80006e2:	6078      	str	r0, [r7, #4]
 80006e4:	460b      	mov	r3, r1
 80006e6:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == ENABLE){
 80006e8:	78fb      	ldrb	r3, [r7, #3]
 80006ea:	2b01      	cmp	r3, #1
 80006ec:	d120      	bne.n	8000730 <SPI_periClockControl+0x54>
			if(pSPIx == SPI1){
 80006ee:	687b      	ldr	r3, [r7, #4]
 80006f0:	4a22      	ldr	r2, [pc, #136]	@ (800077c <SPI_periClockControl+0xa0>)
 80006f2:	4293      	cmp	r3, r2
 80006f4:	d106      	bne.n	8000704 <SPI_periClockControl+0x28>
				SPI1_PCLK_EN();
 80006f6:	4b22      	ldr	r3, [pc, #136]	@ (8000780 <SPI_periClockControl+0xa4>)
 80006f8:	699b      	ldr	r3, [r3, #24]
 80006fa:	4a21      	ldr	r2, [pc, #132]	@ (8000780 <SPI_periClockControl+0xa4>)
 80006fc:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000700:	6193      	str	r3, [r2, #24]
			}
			else if(pSPIx == SPI3){
				SPI3_PCLK_DI();
			}
		}
}
 8000702:	e035      	b.n	8000770 <SPI_periClockControl+0x94>
			else if(pSPIx == SPI2){
 8000704:	687b      	ldr	r3, [r7, #4]
 8000706:	4a1f      	ldr	r2, [pc, #124]	@ (8000784 <SPI_periClockControl+0xa8>)
 8000708:	4293      	cmp	r3, r2
 800070a:	d106      	bne.n	800071a <SPI_periClockControl+0x3e>
				SPI2_PCLK_EN();
 800070c:	4b1c      	ldr	r3, [pc, #112]	@ (8000780 <SPI_periClockControl+0xa4>)
 800070e:	69db      	ldr	r3, [r3, #28]
 8000710:	4a1b      	ldr	r2, [pc, #108]	@ (8000780 <SPI_periClockControl+0xa4>)
 8000712:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000716:	61d3      	str	r3, [r2, #28]
}
 8000718:	e02a      	b.n	8000770 <SPI_periClockControl+0x94>
			else if(pSPIx == SPI3){
 800071a:	687b      	ldr	r3, [r7, #4]
 800071c:	4a1a      	ldr	r2, [pc, #104]	@ (8000788 <SPI_periClockControl+0xac>)
 800071e:	4293      	cmp	r3, r2
 8000720:	d126      	bne.n	8000770 <SPI_periClockControl+0x94>
				SPI3_PCLK_EN();
 8000722:	4b17      	ldr	r3, [pc, #92]	@ (8000780 <SPI_periClockControl+0xa4>)
 8000724:	69db      	ldr	r3, [r3, #28]
 8000726:	4a16      	ldr	r2, [pc, #88]	@ (8000780 <SPI_periClockControl+0xa4>)
 8000728:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800072c:	61d3      	str	r3, [r2, #28]
}
 800072e:	e01f      	b.n	8000770 <SPI_periClockControl+0x94>
			if(pSPIx == SPI1){
 8000730:	687b      	ldr	r3, [r7, #4]
 8000732:	4a12      	ldr	r2, [pc, #72]	@ (800077c <SPI_periClockControl+0xa0>)
 8000734:	4293      	cmp	r3, r2
 8000736:	d106      	bne.n	8000746 <SPI_periClockControl+0x6a>
				SPI1_PCLK_DI();
 8000738:	4b11      	ldr	r3, [pc, #68]	@ (8000780 <SPI_periClockControl+0xa4>)
 800073a:	699b      	ldr	r3, [r3, #24]
 800073c:	4a10      	ldr	r2, [pc, #64]	@ (8000780 <SPI_periClockControl+0xa4>)
 800073e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8000742:	6193      	str	r3, [r2, #24]
}
 8000744:	e014      	b.n	8000770 <SPI_periClockControl+0x94>
			else if(pSPIx == SPI2){
 8000746:	687b      	ldr	r3, [r7, #4]
 8000748:	4a0e      	ldr	r2, [pc, #56]	@ (8000784 <SPI_periClockControl+0xa8>)
 800074a:	4293      	cmp	r3, r2
 800074c:	d106      	bne.n	800075c <SPI_periClockControl+0x80>
				SPI2_PCLK_DI();
 800074e:	4b0c      	ldr	r3, [pc, #48]	@ (8000780 <SPI_periClockControl+0xa4>)
 8000750:	69db      	ldr	r3, [r3, #28]
 8000752:	4a0b      	ldr	r2, [pc, #44]	@ (8000780 <SPI_periClockControl+0xa4>)
 8000754:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8000758:	61d3      	str	r3, [r2, #28]
}
 800075a:	e009      	b.n	8000770 <SPI_periClockControl+0x94>
			else if(pSPIx == SPI3){
 800075c:	687b      	ldr	r3, [r7, #4]
 800075e:	4a0a      	ldr	r2, [pc, #40]	@ (8000788 <SPI_periClockControl+0xac>)
 8000760:	4293      	cmp	r3, r2
 8000762:	d105      	bne.n	8000770 <SPI_periClockControl+0x94>
				SPI3_PCLK_DI();
 8000764:	4b06      	ldr	r3, [pc, #24]	@ (8000780 <SPI_periClockControl+0xa4>)
 8000766:	69db      	ldr	r3, [r3, #28]
 8000768:	4a05      	ldr	r2, [pc, #20]	@ (8000780 <SPI_periClockControl+0xa4>)
 800076a:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800076e:	61d3      	str	r3, [r2, #28]
}
 8000770:	bf00      	nop
 8000772:	370c      	adds	r7, #12
 8000774:	46bd      	mov	sp, r7
 8000776:	bc80      	pop	{r7}
 8000778:	4770      	bx	lr
 800077a:	bf00      	nop
 800077c:	40013000 	.word	0x40013000
 8000780:	40021000 	.word	0x40021000
 8000784:	40003800 	.word	0x40003800
 8000788:	40003c00 	.word	0x40003c00

0800078c <SPI_init>:
 * @return            -
 *
 * @Note              -

 */
void SPI_init(SPI_Handle_t *pSPIHandle){
 800078c:	b580      	push	{r7, lr}
 800078e:	b084      	sub	sp, #16
 8000790:	af00      	add	r7, sp, #0
 8000792:	6078      	str	r0, [r7, #4]
	// peripheral clock enable
	SPI_periClockControl(pSPIHandle->pSPIx, ENABLE);
 8000794:	687b      	ldr	r3, [r7, #4]
 8000796:	681b      	ldr	r3, [r3, #0]
 8000798:	2101      	movs	r1, #1
 800079a:	4618      	mov	r0, r3
 800079c:	f7ff ff9e 	bl	80006dc <SPI_periClockControl>
	// configure the SPI_CR1 register
	uint32_t tempreg=0;
 80007a0:	2300      	movs	r3, #0
 80007a2:	60fb      	str	r3, [r7, #12]

	//1. Configure the device mode
	tempreg |= pSPIHandle->SPIConfig.SPI_DeviceMode << 2;
 80007a4:	687b      	ldr	r3, [r7, #4]
 80007a6:	791b      	ldrb	r3, [r3, #4]
 80007a8:	009b      	lsls	r3, r3, #2
 80007aa:	68fa      	ldr	r2, [r7, #12]
 80007ac:	4313      	orrs	r3, r2
 80007ae:	60fb      	str	r3, [r7, #12]

	//2. Configure the BusConfig
	if(pSPIHandle->SPIConfig.SPI_BusConfig == SPI_BUS_CONFIG_FD){
 80007b0:	687b      	ldr	r3, [r7, #4]
 80007b2:	795b      	ldrb	r3, [r3, #5]
 80007b4:	2b01      	cmp	r3, #1
 80007b6:	d104      	bne.n	80007c2 <SPI_init+0x36>
		// BIDIMODE will 0
		tempreg &= ~(1 << 15);
 80007b8:	68fb      	ldr	r3, [r7, #12]
 80007ba:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80007be:	60fb      	str	r3, [r7, #12]
 80007c0:	e014      	b.n	80007ec <SPI_init+0x60>
	}
	else if(pSPIHandle->SPIConfig.SPI_BusConfig == SPI_BUS_CONFIG_HD){
 80007c2:	687b      	ldr	r3, [r7, #4]
 80007c4:	795b      	ldrb	r3, [r3, #5]
 80007c6:	2b02      	cmp	r3, #2
 80007c8:	d104      	bne.n	80007d4 <SPI_init+0x48>
		// BIDIMODE will be 1
		tempreg |= (1 << 15);
 80007ca:	68fb      	ldr	r3, [r7, #12]
 80007cc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80007d0:	60fb      	str	r3, [r7, #12]
 80007d2:	e00b      	b.n	80007ec <SPI_init+0x60>
	}
	else if(pSPIHandle->SPIConfig.SPI_BusConfig == SPI_BUS_CONFIG_SIMPLEX_RXONLY){
 80007d4:	687b      	ldr	r3, [r7, #4]
 80007d6:	795b      	ldrb	r3, [r3, #5]
 80007d8:	2b03      	cmp	r3, #3
 80007da:	d107      	bne.n	80007ec <SPI_init+0x60>
		//1. BIDIMODE will be 0
		tempreg &= ~(1 << 15);
 80007dc:	68fb      	ldr	r3, [r7, #12]
 80007de:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80007e2:	60fb      	str	r3, [r7, #12]
		//2. RXONLY will be 1
		tempreg |= (1 << 10);
 80007e4:	68fb      	ldr	r3, [r7, #12]
 80007e6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80007ea:	60fb      	str	r3, [r7, #12]
	}

	//3. Configure the speed of serial clock (baud rate)
	tempreg |= pSPIHandle->SPIConfig.SPI_SClkSpeed << SPI_CR1_BR;
 80007ec:	687b      	ldr	r3, [r7, #4]
 80007ee:	799b      	ldrb	r3, [r3, #6]
 80007f0:	00db      	lsls	r3, r3, #3
 80007f2:	68fa      	ldr	r2, [r7, #12]
 80007f4:	4313      	orrs	r3, r2
 80007f6:	60fb      	str	r3, [r7, #12]
	//4. Configure the DFF
	tempreg |= pSPIHandle->SPIConfig.SPI_DFF << SPI_CR1_DFF;
 80007f8:	687b      	ldr	r3, [r7, #4]
 80007fa:	79db      	ldrb	r3, [r3, #7]
 80007fc:	02db      	lsls	r3, r3, #11
 80007fe:	68fa      	ldr	r2, [r7, #12]
 8000800:	4313      	orrs	r3, r2
 8000802:	60fb      	str	r3, [r7, #12]
	//5. Configure the clock polarity
	tempreg |= pSPIHandle->SPIConfig.SPI_CPOL << SPI_CR1_CPOL;
 8000804:	687b      	ldr	r3, [r7, #4]
 8000806:	7a1b      	ldrb	r3, [r3, #8]
 8000808:	005b      	lsls	r3, r3, #1
 800080a:	68fa      	ldr	r2, [r7, #12]
 800080c:	4313      	orrs	r3, r2
 800080e:	60fb      	str	r3, [r7, #12]
	//6. Configure the clock phase
	tempreg |= pSPIHandle->SPIConfig.SPI_CPHA << SPI_CR1_CPHA;
 8000810:	687b      	ldr	r3, [r7, #4]
 8000812:	7a5b      	ldrb	r3, [r3, #9]
 8000814:	461a      	mov	r2, r3
 8000816:	68fb      	ldr	r3, [r7, #12]
 8000818:	4313      	orrs	r3, r2
 800081a:	60fb      	str	r3, [r7, #12]
	//7. Configuring Slave Select Management
	tempreg |= pSPIHandle->SPIConfig.SPI_SSM << SPI_CR1_SSM;
 800081c:	687b      	ldr	r3, [r7, #4]
 800081e:	7a9b      	ldrb	r3, [r3, #10]
 8000820:	025b      	lsls	r3, r3, #9
 8000822:	68fa      	ldr	r2, [r7, #12]
 8000824:	4313      	orrs	r3, r2
 8000826:	60fb      	str	r3, [r7, #12]

	pSPIHandle->pSPIx->SPI_CR1 = tempreg;
 8000828:	687b      	ldr	r3, [r7, #4]
 800082a:	681b      	ldr	r3, [r3, #0]
 800082c:	68fa      	ldr	r2, [r7, #12]
 800082e:	601a      	str	r2, [r3, #0]
}
 8000830:	bf00      	nop
 8000832:	3710      	adds	r7, #16
 8000834:	46bd      	mov	sp, r7
 8000836:	bd80      	pop	{r7, pc}

08000838 <SPI_SendData>:
 *
 * @Note              -

 */

void SPI_SendData(SPI_RegDef_t *pSPIx, uint8_t *pTxBuffer, uint32_t Len){
 8000838:	b580      	push	{r7, lr}
 800083a:	b084      	sub	sp, #16
 800083c:	af00      	add	r7, sp, #0
 800083e:	60f8      	str	r0, [r7, #12]
 8000840:	60b9      	str	r1, [r7, #8]
 8000842:	607a      	str	r2, [r7, #4]
	while(Len > 0){
 8000844:	e027      	b.n	8000896 <SPI_SendData+0x5e>
		//1. wait for TXE flag to SET
		while(SPI_GetFlagStatus(pSPIx, SPI_TXE_FLAG) == FLAG_RESET);
 8000846:	bf00      	nop
 8000848:	2102      	movs	r1, #2
 800084a:	68f8      	ldr	r0, [r7, #12]
 800084c:	f000 f82b 	bl	80008a6 <SPI_GetFlagStatus>
 8000850:	4603      	mov	r3, r0
 8000852:	2b00      	cmp	r3, #0
 8000854:	d0f8      	beq.n	8000848 <SPI_SendData+0x10>
		//2. Check DFF bit in CR1
		if(pSPIx->SPI_CR1 & (1 << SPI_CR1_DFF)){
 8000856:	68fb      	ldr	r3, [r7, #12]
 8000858:	681b      	ldr	r3, [r3, #0]
 800085a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800085e:	2b00      	cmp	r3, #0
 8000860:	d00e      	beq.n	8000880 <SPI_SendData+0x48>
			// 16bit frame
			pSPIx->SPI_DR = *((uint16_t *)pTxBuffer);
 8000862:	68bb      	ldr	r3, [r7, #8]
 8000864:	881b      	ldrh	r3, [r3, #0]
 8000866:	461a      	mov	r2, r3
 8000868:	68fb      	ldr	r3, [r7, #12]
 800086a:	60da      	str	r2, [r3, #12]
			Len--;
 800086c:	687b      	ldr	r3, [r7, #4]
 800086e:	3b01      	subs	r3, #1
 8000870:	607b      	str	r3, [r7, #4]
			Len--;
 8000872:	687b      	ldr	r3, [r7, #4]
 8000874:	3b01      	subs	r3, #1
 8000876:	607b      	str	r3, [r7, #4]
			(uint16_t *)pTxBuffer++;
 8000878:	68bb      	ldr	r3, [r7, #8]
 800087a:	3301      	adds	r3, #1
 800087c:	60bb      	str	r3, [r7, #8]
 800087e:	e00a      	b.n	8000896 <SPI_SendData+0x5e>
		}
		else{
			// 8bit frame
			pSPIx->SPI_DR = *pTxBuffer;
 8000880:	68bb      	ldr	r3, [r7, #8]
 8000882:	781b      	ldrb	r3, [r3, #0]
 8000884:	461a      	mov	r2, r3
 8000886:	68fb      	ldr	r3, [r7, #12]
 8000888:	60da      	str	r2, [r3, #12]
			Len--;
 800088a:	687b      	ldr	r3, [r7, #4]
 800088c:	3b01      	subs	r3, #1
 800088e:	607b      	str	r3, [r7, #4]
			pTxBuffer++;
 8000890:	68bb      	ldr	r3, [r7, #8]
 8000892:	3301      	adds	r3, #1
 8000894:	60bb      	str	r3, [r7, #8]
	while(Len > 0){
 8000896:	687b      	ldr	r3, [r7, #4]
 8000898:	2b00      	cmp	r3, #0
 800089a:	d1d4      	bne.n	8000846 <SPI_SendData+0xe>
		}
	}
}
 800089c:	bf00      	nop
 800089e:	bf00      	nop
 80008a0:	3710      	adds	r7, #16
 80008a2:	46bd      	mov	sp, r7
 80008a4:	bd80      	pop	{r7, pc}

080008a6 <SPI_GetFlagStatus>:
 *
 * @Note              -

 */

uint8_t SPI_GetFlagStatus(SPI_RegDef_t *pSPIx, uint32_t FlagName){
 80008a6:	b480      	push	{r7}
 80008a8:	b083      	sub	sp, #12
 80008aa:	af00      	add	r7, sp, #0
 80008ac:	6078      	str	r0, [r7, #4]
 80008ae:	6039      	str	r1, [r7, #0]
	if(pSPIx->SPI_SR & FlagName){
 80008b0:	687b      	ldr	r3, [r7, #4]
 80008b2:	689a      	ldr	r2, [r3, #8]
 80008b4:	683b      	ldr	r3, [r7, #0]
 80008b6:	4013      	ands	r3, r2
 80008b8:	2b00      	cmp	r3, #0
 80008ba:	d001      	beq.n	80008c0 <SPI_GetFlagStatus+0x1a>
		return FLAG_SET;
 80008bc:	2301      	movs	r3, #1
 80008be:	e000      	b.n	80008c2 <SPI_GetFlagStatus+0x1c>
	}
	else{
		return FLAG_RESET;
 80008c0:	2300      	movs	r3, #0
	}
}
 80008c2:	4618      	mov	r0, r3
 80008c4:	370c      	adds	r7, #12
 80008c6:	46bd      	mov	sp, r7
 80008c8:	bc80      	pop	{r7}
 80008ca:	4770      	bx	lr

080008cc <SPI_PeripheralControl>:
 *
 * @Note              -

 */

void SPI_PeripheralControl(SPI_RegDef_t *pSPIx, uint8_t EnOrDi){
 80008cc:	b480      	push	{r7}
 80008ce:	b083      	sub	sp, #12
 80008d0:	af00      	add	r7, sp, #0
 80008d2:	6078      	str	r0, [r7, #4]
 80008d4:	460b      	mov	r3, r1
 80008d6:	70fb      	strb	r3, [r7, #3]
	if(EnOrDi == ENABLE){
 80008d8:	78fb      	ldrb	r3, [r7, #3]
 80008da:	2b01      	cmp	r3, #1
 80008dc:	d106      	bne.n	80008ec <SPI_PeripheralControl+0x20>
		pSPIx->SPI_CR1 |= (1<< SPI_CR1_SPE);
 80008de:	687b      	ldr	r3, [r7, #4]
 80008e0:	681b      	ldr	r3, [r3, #0]
 80008e2:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80008e6:	687b      	ldr	r3, [r7, #4]
 80008e8:	601a      	str	r2, [r3, #0]
	}
	else{
		pSPIx->SPI_CR1 &= ~(1<< SPI_CR1_SPE);
	}
}
 80008ea:	e005      	b.n	80008f8 <SPI_PeripheralControl+0x2c>
		pSPIx->SPI_CR1 &= ~(1<< SPI_CR1_SPE);
 80008ec:	687b      	ldr	r3, [r7, #4]
 80008ee:	681b      	ldr	r3, [r3, #0]
 80008f0:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 80008f4:	687b      	ldr	r3, [r7, #4]
 80008f6:	601a      	str	r2, [r3, #0]
}
 80008f8:	bf00      	nop
 80008fa:	370c      	adds	r7, #12
 80008fc:	46bd      	mov	sp, r7
 80008fe:	bc80      	pop	{r7}
 8000900:	4770      	bx	lr

08000902 <SPI_SSOEConfig>:
 * @return            -
 *
 * @Note              -

 */
void SPI_SSOEConfig(SPI_RegDef_t *pSPIx, uint8_t EnOrDi){
 8000902:	b480      	push	{r7}
 8000904:	b083      	sub	sp, #12
 8000906:	af00      	add	r7, sp, #0
 8000908:	6078      	str	r0, [r7, #4]
 800090a:	460b      	mov	r3, r1
 800090c:	70fb      	strb	r3, [r7, #3]
	if(EnOrDi == ENABLE){
 800090e:	78fb      	ldrb	r3, [r7, #3]
 8000910:	2b01      	cmp	r3, #1
 8000912:	d106      	bne.n	8000922 <SPI_SSOEConfig+0x20>
		pSPIx->SPI_CR2 |= (1 << SPI_CR2_SSOE);
 8000914:	687b      	ldr	r3, [r7, #4]
 8000916:	685b      	ldr	r3, [r3, #4]
 8000918:	f043 0204 	orr.w	r2, r3, #4
 800091c:	687b      	ldr	r3, [r7, #4]
 800091e:	605a      	str	r2, [r3, #4]
	}
	else{
		pSPIx->SPI_CR2 &= ~(1 << SPI_CR2_SSOE);
	}
}
 8000920:	e005      	b.n	800092e <SPI_SSOEConfig+0x2c>
		pSPIx->SPI_CR2 &= ~(1 << SPI_CR2_SSOE);
 8000922:	687b      	ldr	r3, [r7, #4]
 8000924:	685b      	ldr	r3, [r3, #4]
 8000926:	f023 0204 	bic.w	r2, r3, #4
 800092a:	687b      	ldr	r3, [r7, #4]
 800092c:	605a      	str	r2, [r3, #4]
}
 800092e:	bf00      	nop
 8000930:	370c      	adds	r7, #12
 8000932:	46bd      	mov	sp, r7
 8000934:	bc80      	pop	{r7}
 8000936:	4770      	bx	lr

08000938 <memset>:
 8000938:	4603      	mov	r3, r0
 800093a:	4402      	add	r2, r0
 800093c:	4293      	cmp	r3, r2
 800093e:	d100      	bne.n	8000942 <memset+0xa>
 8000940:	4770      	bx	lr
 8000942:	f803 1b01 	strb.w	r1, [r3], #1
 8000946:	e7f9      	b.n	800093c <memset+0x4>

08000948 <__libc_init_array>:
 8000948:	b570      	push	{r4, r5, r6, lr}
 800094a:	2600      	movs	r6, #0
 800094c:	4d0c      	ldr	r5, [pc, #48]	@ (8000980 <__libc_init_array+0x38>)
 800094e:	4c0d      	ldr	r4, [pc, #52]	@ (8000984 <__libc_init_array+0x3c>)
 8000950:	1b64      	subs	r4, r4, r5
 8000952:	10a4      	asrs	r4, r4, #2
 8000954:	42a6      	cmp	r6, r4
 8000956:	d109      	bne.n	800096c <__libc_init_array+0x24>
 8000958:	f000 f81a 	bl	8000990 <_init>
 800095c:	2600      	movs	r6, #0
 800095e:	4d0a      	ldr	r5, [pc, #40]	@ (8000988 <__libc_init_array+0x40>)
 8000960:	4c0a      	ldr	r4, [pc, #40]	@ (800098c <__libc_init_array+0x44>)
 8000962:	1b64      	subs	r4, r4, r5
 8000964:	10a4      	asrs	r4, r4, #2
 8000966:	42a6      	cmp	r6, r4
 8000968:	d105      	bne.n	8000976 <__libc_init_array+0x2e>
 800096a:	bd70      	pop	{r4, r5, r6, pc}
 800096c:	f855 3b04 	ldr.w	r3, [r5], #4
 8000970:	4798      	blx	r3
 8000972:	3601      	adds	r6, #1
 8000974:	e7ee      	b.n	8000954 <__libc_init_array+0xc>
 8000976:	f855 3b04 	ldr.w	r3, [r5], #4
 800097a:	4798      	blx	r3
 800097c:	3601      	adds	r6, #1
 800097e:	e7f2      	b.n	8000966 <__libc_init_array+0x1e>
 8000980:	080009bc 	.word	0x080009bc
 8000984:	080009bc 	.word	0x080009bc
 8000988:	080009bc 	.word	0x080009bc
 800098c:	080009c0 	.word	0x080009c0

08000990 <_init>:
 8000990:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000992:	bf00      	nop
 8000994:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000996:	bc08      	pop	{r3}
 8000998:	469e      	mov	lr, r3
 800099a:	4770      	bx	lr

0800099c <_fini>:
 800099c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800099e:	bf00      	nop
 80009a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80009a2:	bc08      	pop	{r3}
 80009a4:	469e      	mov	lr, r3
 80009a6:	4770      	bx	lr
