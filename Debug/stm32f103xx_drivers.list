
stm32f103xx_drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000013b8  08000130  08000130  00001130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  080014e8  080014e8  000024e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001500  08001500  0000305c  2**0
                  CONTENTS
  4 .ARM          00000000  08001500  08001500  0000305c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001500  08001500  0000305c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001500  08001500  00002500  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08001504  08001504  00002504  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  08001508  00003000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000016c  2000005c  08001564  0000305c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001c8  08001564  000031c8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000305c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00001818  00000000  00000000  00003085  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000006d0  00000000  00000000  0000489d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000220  00000000  00000000  00004f70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000182  00000000  00000000  00005190  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000034a2  00000000  00000000  00005312  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00002653  00000000  00000000  000087b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0000b73d  00000000  00000000  0000ae07  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00016544  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000e10  00000000  00000000  00016588  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006f  00000000  00000000  00017398  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	@ (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	@ (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	@ (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	2000005c 	.word	0x2000005c
 800014c:	00000000 	.word	0x00000000
 8000150:	080014d0 	.word	0x080014d0

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	@ (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	@ (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	@ (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000060 	.word	0x20000060
 800016c:	080014d0 	.word	0x080014d0

08000170 <delay>:

// arduino led

#define LED_PIN 9

void delay(void){
 8000170:	b480      	push	{r7}
 8000172:	b083      	sub	sp, #12
 8000174:	af00      	add	r7, sp, #0
	for(int i=0 ; i<=500000; i++){
 8000176:	2300      	movs	r3, #0
 8000178:	607b      	str	r3, [r7, #4]
 800017a:	e002      	b.n	8000182 <delay+0x12>
 800017c:	687b      	ldr	r3, [r7, #4]
 800017e:	3301      	adds	r3, #1
 8000180:	607b      	str	r3, [r7, #4]
 8000182:	687b      	ldr	r3, [r7, #4]
 8000184:	4a04      	ldr	r2, [pc, #16]	@ (8000198 <delay+0x28>)
 8000186:	4293      	cmp	r3, r2
 8000188:	ddf8      	ble.n	800017c <delay+0xc>

	}
}
 800018a:	bf00      	nop
 800018c:	bf00      	nop
 800018e:	370c      	adds	r7, #12
 8000190:	46bd      	mov	sp, r7
 8000192:	bc80      	pop	{r7}
 8000194:	4770      	bx	lr
 8000196:	bf00      	nop
 8000198:	0007a120 	.word	0x0007a120

0800019c <SPI2_Init>:
	GPIO_init(&SPIPins);
	SPIPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_12;
	GPIO_init(&SPIPins);
}

void SPI2_Init(void){
 800019c:	b580      	push	{r7, lr}
 800019e:	b084      	sub	sp, #16
 80001a0:	af00      	add	r7, sp, #0
	SPI_Handle_t SPI2handle;

	SPI2handle.pSPIx = SPI2;
 80001a2:	4b0c      	ldr	r3, [pc, #48]	@ (80001d4 <SPI2_Init+0x38>)
 80001a4:	607b      	str	r3, [r7, #4]
	SPI2handle.SPIConfig.SPI_BusConfig = SPI_BUS_CONFIG_FD;
 80001a6:	2301      	movs	r3, #1
 80001a8:	727b      	strb	r3, [r7, #9]
	SPI2handle.SPIConfig.SPI_DeviceMode = SPI_DEVICE_MODE_MASTER;
 80001aa:	2301      	movs	r3, #1
 80001ac:	723b      	strb	r3, [r7, #8]
	SPI2handle.SPIConfig.SPI_SClkSpeed =SPI_SCLK_SPEED_DIV32;
 80001ae:	2304      	movs	r3, #4
 80001b0:	72bb      	strb	r3, [r7, #10]
	SPI2handle.SPIConfig.SPI_CPOL = SPI_CPOL_LOW;
 80001b2:	2300      	movs	r3, #0
 80001b4:	733b      	strb	r3, [r7, #12]
	SPI2handle.SPIConfig.SPI_CPHA = SPI_CPHA_LOW;
 80001b6:	2300      	movs	r3, #0
 80001b8:	737b      	strb	r3, [r7, #13]
	SPI2handle.SPIConfig.SPI_SSM = SPI_SSM_DI;
 80001ba:	2300      	movs	r3, #0
 80001bc:	73bb      	strb	r3, [r7, #14]
	SPI2handle.SPIConfig.SPI_DFF = SPI_DFF_8BITS;
 80001be:	2300      	movs	r3, #0
 80001c0:	72fb      	strb	r3, [r7, #11]
	SPI_init(&SPI2handle);
 80001c2:	1d3b      	adds	r3, r7, #4
 80001c4:	4618      	mov	r0, r3
 80001c6:	f000 fbeb 	bl	80009a0 <SPI_init>
}
 80001ca:	bf00      	nop
 80001cc:	3710      	adds	r7, #16
 80001ce:	46bd      	mov	sp, r7
 80001d0:	bd80      	pop	{r7, pc}
 80001d2:	bf00      	nop
 80001d4:	40003800 	.word	0x40003800

080001d8 <GPIO_ButtonInit>:

void GPIO_ButtonInit(void){
 80001d8:	b580      	push	{r7, lr}
 80001da:	b086      	sub	sp, #24
 80001dc:	af00      	add	r7, sp, #0
	GPIO_Handle_t gpio_btn, gpio_led;
	gpio_btn.pGPIOx = GPIOA;
 80001de:	4b10      	ldr	r3, [pc, #64]	@ (8000220 <GPIO_ButtonInit+0x48>)
 80001e0:	60fb      	str	r3, [r7, #12]
	gpio_btn.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_5;
 80001e2:	2305      	movs	r3, #5
 80001e4:	743b      	strb	r3, [r7, #16]
	gpio_btn.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_IT_FT;
 80001e6:	2310      	movs	r3, #16
 80001e8:	747b      	strb	r3, [r7, #17]
	GPIO_periClockControl(GPIOA, ENABLE);
 80001ea:	2101      	movs	r1, #1
 80001ec:	480c      	ldr	r0, [pc, #48]	@ (8000220 <GPIO_ButtonInit+0x48>)
 80001ee:	f000 f99f 	bl	8000530 <GPIO_periClockControl>
	GPIO_init(&gpio_btn);
 80001f2:	f107 030c 	add.w	r3, r7, #12
 80001f6:	4618      	mov	r0, r3
 80001f8:	f000 fa52 	bl	80006a0 <GPIO_init>

	gpio_led.pGPIOx = GPIOC;
 80001fc:	4b09      	ldr	r3, [pc, #36]	@ (8000224 <GPIO_ButtonInit+0x4c>)
 80001fe:	603b      	str	r3, [r7, #0]
	gpio_led.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_13;
 8000200:	230d      	movs	r3, #13
 8000202:	713b      	strb	r3, [r7, #4]
	gpio_led.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_OUTPUT_PP_10MHZ;
 8000204:	2301      	movs	r3, #1
 8000206:	717b      	strb	r3, [r7, #5]
	GPIO_periClockControl(GPIOC, ENABLE);
 8000208:	2101      	movs	r1, #1
 800020a:	4806      	ldr	r0, [pc, #24]	@ (8000224 <GPIO_ButtonInit+0x4c>)
 800020c:	f000 f990 	bl	8000530 <GPIO_periClockControl>
	GPIO_init(&gpio_led);
 8000210:	463b      	mov	r3, r7
 8000212:	4618      	mov	r0, r3
 8000214:	f000 fa44 	bl	80006a0 <GPIO_init>
}
 8000218:	bf00      	nop
 800021a:	3718      	adds	r7, #24
 800021c:	46bd      	mov	sp, r7
 800021e:	bd80      	pop	{r7, pc}
 8000220:	40010800 	.word	0x40010800
 8000224:	40011000 	.word	0x40011000

08000228 <SPI_verifyResponse>:

uint8_t SPI_verifyResponse(uint8_t ack){
 8000228:	b480      	push	{r7}
 800022a:	b083      	sub	sp, #12
 800022c:	af00      	add	r7, sp, #0
 800022e:	4603      	mov	r3, r0
 8000230:	71fb      	strb	r3, [r7, #7]
	if(ack==0xF5){
 8000232:	79fb      	ldrb	r3, [r7, #7]
 8000234:	2bf5      	cmp	r3, #245	@ 0xf5
 8000236:	d101      	bne.n	800023c <SPI_verifyResponse+0x14>
		//ack
		return 1;
 8000238:	2301      	movs	r3, #1
 800023a:	e000      	b.n	800023e <SPI_verifyResponse+0x16>
	}
	else{
		//nack
		return 0;
 800023c:	2300      	movs	r3, #0
	}
}
 800023e:	4618      	mov	r0, r3
 8000240:	370c      	adds	r7, #12
 8000242:	46bd      	mov	sp, r7
 8000244:	bc80      	pop	{r7}
 8000246:	4770      	bx	lr

08000248 <main>:

int main(void){
 8000248:	b580      	push	{r7, lr}
 800024a:	b084      	sub	sp, #16
 800024c:	af00      	add	r7, sp, #0
	uint8_t dummy_write = 0xff;
 800024e:	23ff      	movs	r3, #255	@ 0xff
 8000250:	73fb      	strb	r3, [r7, #15]
	uint8_t dummy_read;
	uint8_t ackbyte;
	uint8_t arg[2];
	printf("Application is running\n");
 8000252:	484f      	ldr	r0, [pc, #316]	@ (8000390 <main+0x148>)
 8000254:	f000 fdae 	bl	8000db4 <puts>

	GPIO_ButtonInit();
 8000258:	f7ff ffbe 	bl	80001d8 <GPIO_ButtonInit>

	SPI2_Init();
 800025c:	f7ff ff9e 	bl	800019c <SPI2_Init>
	while(1){
		// wait till the button is pressed
		while(!GPIO_ReadFromInputPin(GPIOA, GPIO_PIN_0));
 8000260:	bf00      	nop
 8000262:	2100      	movs	r1, #0
 8000264:	484b      	ldr	r0, [pc, #300]	@ (8000394 <main+0x14c>)
 8000266:	f000 fb2d 	bl	80008c4 <GPIO_ReadFromInputPin>
 800026a:	4603      	mov	r3, r0
 800026c:	2b00      	cmp	r3, #0
 800026e:	d0f8      	beq.n	8000262 <main+0x1a>
		//To Avoid de-bouncing issue
		delay();
 8000270:	f7ff ff7e 	bl	8000170 <delay>
		//enable spi2 peripheral
		SPI_PeripheralControl(SPI2,ENABLE);
 8000274:	2101      	movs	r1, #1
 8000276:	4848      	ldr	r0, [pc, #288]	@ (8000398 <main+0x150>)
 8000278:	f000 fc69 	bl	8000b4e <SPI_PeripheralControl>

		//1. CMD_LED_CTRL		<pin no(1)>			<value(1)>

		// send led command to arduino to check if it supports control command or not.
		uint8_t comndcode = COMMAND_LED_CTRL;
 800027c:	2350      	movs	r3, #80	@ 0x50
 800027e:	71fb      	strb	r3, [r7, #7]
		SPI_SendData(SPI2, &comndcode, 1);
 8000280:	1dfb      	adds	r3, r7, #7
 8000282:	2201      	movs	r2, #1
 8000284:	4619      	mov	r1, r3
 8000286:	4844      	ldr	r0, [pc, #272]	@ (8000398 <main+0x150>)
 8000288:	f000 fbe0 	bl	8000a4c <SPI_SendData>
		 */
		/* Remember: In SPI communication when master or slave sends 1 byte,
		 * it also receives 1 byte in return.
		 */
		// so dummy read to clear the RXNE
		SPI_ReceiveData(SPI2, &dummy_read, 1);
 800028c:	f107 030e 	add.w	r3, r7, #14
 8000290:	2201      	movs	r2, #1
 8000292:	4619      	mov	r1, r3
 8000294:	4840      	ldr	r0, [pc, #256]	@ (8000398 <main+0x150>)
 8000296:	f000 fc10 	bl	8000aba <SPI_ReceiveData>
		// send some dummy bits(1 byte) to fetch the response from the slave
		SPI_SendData(SPI2, &dummy_write, 1);
 800029a:	f107 030f 	add.w	r3, r7, #15
 800029e:	2201      	movs	r2, #1
 80002a0:	4619      	mov	r1, r3
 80002a2:	483d      	ldr	r0, [pc, #244]	@ (8000398 <main+0x150>)
 80002a4:	f000 fbd2 	bl	8000a4c <SPI_SendData>

		// receive the ack from the slave
		SPI_ReceiveData(SPI2, &ackbyte, 1);
 80002a8:	f107 030d 	add.w	r3, r7, #13
 80002ac:	2201      	movs	r2, #1
 80002ae:	4619      	mov	r1, r3
 80002b0:	4839      	ldr	r0, [pc, #228]	@ (8000398 <main+0x150>)
 80002b2:	f000 fc02 	bl	8000aba <SPI_ReceiveData>

		if(SPI_verifyResponse(ackbyte)){
 80002b6:	7b7b      	ldrb	r3, [r7, #13]
 80002b8:	4618      	mov	r0, r3
 80002ba:	f7ff ffb5 	bl	8000228 <SPI_verifyResponse>
 80002be:	4603      	mov	r3, r0
 80002c0:	2b00      	cmp	r3, #0
 80002c2:	d00a      	beq.n	80002da <main+0x92>
			// send args.
			arg[0] = LED_PIN;
 80002c4:	2309      	movs	r3, #9
 80002c6:	723b      	strb	r3, [r7, #8]
			arg[1] = LED_ON;
 80002c8:	2301      	movs	r3, #1
 80002ca:	727b      	strb	r3, [r7, #9]

			SPI_SendData(SPI2, arg, 2);
 80002cc:	f107 0308 	add.w	r3, r7, #8
 80002d0:	2202      	movs	r2, #2
 80002d2:	4619      	mov	r1, r3
 80002d4:	4830      	ldr	r0, [pc, #192]	@ (8000398 <main+0x150>)
 80002d6:	f000 fbb9 	bl	8000a4c <SPI_SendData>

		// end of COMMAND_LED_CTRL

		//2. CMD_SENSOR_READ		<analog pin no(1)>
		// wait till the button is pressed
		while(!GPIO_ReadFromInputPin(GPIOA, GPIO_PIN_0));
 80002da:	bf00      	nop
 80002dc:	2100      	movs	r1, #0
 80002de:	482d      	ldr	r0, [pc, #180]	@ (8000394 <main+0x14c>)
 80002e0:	f000 faf0 	bl	80008c4 <GPIO_ReadFromInputPin>
 80002e4:	4603      	mov	r3, r0
 80002e6:	2b00      	cmp	r3, #0
 80002e8:	d0f8      	beq.n	80002dc <main+0x94>
		delay();
 80002ea:	f7ff ff41 	bl	8000170 <delay>
		comndcode = COMMAND_SENSOR_READ;
 80002ee:	2351      	movs	r3, #81	@ 0x51
 80002f0:	71fb      	strb	r3, [r7, #7]
		SPI_SendData(SPI2, &comndcode, 1);
 80002f2:	1dfb      	adds	r3, r7, #7
 80002f4:	2201      	movs	r2, #1
 80002f6:	4619      	mov	r1, r3
 80002f8:	4827      	ldr	r0, [pc, #156]	@ (8000398 <main+0x150>)
 80002fa:	f000 fba7 	bl	8000a4c <SPI_SendData>
		// so dummy read to clear the RXNE
		SPI_ReceiveData(SPI2, &dummy_read, 1);
 80002fe:	f107 030e 	add.w	r3, r7, #14
 8000302:	2201      	movs	r2, #1
 8000304:	4619      	mov	r1, r3
 8000306:	4824      	ldr	r0, [pc, #144]	@ (8000398 <main+0x150>)
 8000308:	f000 fbd7 	bl	8000aba <SPI_ReceiveData>
		// send some dummy bits(1 byte) to fetch the response from the slave
		SPI_SendData(SPI2, &dummy_write, 1);
 800030c:	f107 030f 	add.w	r3, r7, #15
 8000310:	2201      	movs	r2, #1
 8000312:	4619      	mov	r1, r3
 8000314:	4820      	ldr	r0, [pc, #128]	@ (8000398 <main+0x150>)
 8000316:	f000 fb99 	bl	8000a4c <SPI_SendData>

		// receive the ack from the slave
		SPI_ReceiveData(SPI2, &ackbyte, 1);
 800031a:	f107 030d 	add.w	r3, r7, #13
 800031e:	2201      	movs	r2, #1
 8000320:	4619      	mov	r1, r3
 8000322:	481d      	ldr	r0, [pc, #116]	@ (8000398 <main+0x150>)
 8000324:	f000 fbc9 	bl	8000aba <SPI_ReceiveData>

		if(SPI_verifyResponse(ackbyte)){
 8000328:	7b7b      	ldrb	r3, [r7, #13]
 800032a:	4618      	mov	r0, r3
 800032c:	f7ff ff7c 	bl	8000228 <SPI_verifyResponse>
 8000330:	4603      	mov	r3, r0
 8000332:	2b00      	cmp	r3, #0
 8000334:	d01e      	beq.n	8000374 <main+0x12c>
			// send args.
			arg[0] = ANALOG_PIN0;
 8000336:	2300      	movs	r3, #0
 8000338:	723b      	strb	r3, [r7, #8]

			SPI_SendData(SPI2, arg, 1);
 800033a:	f107 0308 	add.w	r3, r7, #8
 800033e:	2201      	movs	r2, #1
 8000340:	4619      	mov	r1, r3
 8000342:	4815      	ldr	r0, [pc, #84]	@ (8000398 <main+0x150>)
 8000344:	f000 fb82 	bl	8000a4c <SPI_SendData>

			// so dummy read to clear the RXNE
			SPI_ReceiveData(SPI2, &dummy_read, 1);
 8000348:	f107 030e 	add.w	r3, r7, #14
 800034c:	2201      	movs	r2, #1
 800034e:	4619      	mov	r1, r3
 8000350:	4811      	ldr	r0, [pc, #68]	@ (8000398 <main+0x150>)
 8000352:	f000 fbb2 	bl	8000aba <SPI_ReceiveData>
			//insert some delay so that slave will be ready with data
			delay();
 8000356:	f7ff ff0b 	bl	8000170 <delay>
			// send some dummy bits(1 byte) to fetch the analog read value
			SPI_SendData(SPI2, &dummy_write, 1);
 800035a:	f107 030f 	add.w	r3, r7, #15
 800035e:	2201      	movs	r2, #1
 8000360:	4619      	mov	r1, r3
 8000362:	480d      	ldr	r0, [pc, #52]	@ (8000398 <main+0x150>)
 8000364:	f000 fb72 	bl	8000a4c <SPI_SendData>

			uint8_t analog_read;
			SPI_ReceiveData(SPI2, &analog_read, 1);
 8000368:	1dbb      	adds	r3, r7, #6
 800036a:	2201      	movs	r2, #1
 800036c:	4619      	mov	r1, r3
 800036e:	480a      	ldr	r0, [pc, #40]	@ (8000398 <main+0x150>)
 8000370:	f000 fba3 	bl	8000aba <SPI_ReceiveData>
		}


		//lets confirm SPI is not busy
		while(SPI_GetFlagStatus(SPI2, SPI_BUSY_FLAG));
 8000374:	bf00      	nop
 8000376:	2180      	movs	r1, #128	@ 0x80
 8000378:	4807      	ldr	r0, [pc, #28]	@ (8000398 <main+0x150>)
 800037a:	f000 fbd5 	bl	8000b28 <SPI_GetFlagStatus>
 800037e:	4603      	mov	r3, r0
 8000380:	2b00      	cmp	r3, #0
 8000382:	d1f8      	bne.n	8000376 <main+0x12e>

		//Disable the SPI2 peripheral
		SPI_periClockControl(SPI2, DISABLE);
 8000384:	2100      	movs	r1, #0
 8000386:	4804      	ldr	r0, [pc, #16]	@ (8000398 <main+0x150>)
 8000388:	f000 fab2 	bl	80008f0 <SPI_periClockControl>
	while(1){
 800038c:	e768      	b.n	8000260 <main+0x18>
 800038e:	bf00      	nop
 8000390:	080014e8 	.word	0x080014e8
 8000394:	40010800 	.word	0x40010800
 8000398:	40003800 	.word	0x40003800

0800039c <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800039c:	b580      	push	{r7, lr}
 800039e:	b086      	sub	sp, #24
 80003a0:	af00      	add	r7, sp, #0
 80003a2:	60f8      	str	r0, [r7, #12]
 80003a4:	60b9      	str	r1, [r7, #8]
 80003a6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80003a8:	2300      	movs	r3, #0
 80003aa:	617b      	str	r3, [r7, #20]
 80003ac:	e00a      	b.n	80003c4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80003ae:	f3af 8000 	nop.w
 80003b2:	4601      	mov	r1, r0
 80003b4:	68bb      	ldr	r3, [r7, #8]
 80003b6:	1c5a      	adds	r2, r3, #1
 80003b8:	60ba      	str	r2, [r7, #8]
 80003ba:	b2ca      	uxtb	r2, r1
 80003bc:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80003be:	697b      	ldr	r3, [r7, #20]
 80003c0:	3301      	adds	r3, #1
 80003c2:	617b      	str	r3, [r7, #20]
 80003c4:	697a      	ldr	r2, [r7, #20]
 80003c6:	687b      	ldr	r3, [r7, #4]
 80003c8:	429a      	cmp	r2, r3
 80003ca:	dbf0      	blt.n	80003ae <_read+0x12>
  }

  return len;
 80003cc:	687b      	ldr	r3, [r7, #4]
}
 80003ce:	4618      	mov	r0, r3
 80003d0:	3718      	adds	r7, #24
 80003d2:	46bd      	mov	sp, r7
 80003d4:	bd80      	pop	{r7, pc}

080003d6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80003d6:	b580      	push	{r7, lr}
 80003d8:	b086      	sub	sp, #24
 80003da:	af00      	add	r7, sp, #0
 80003dc:	60f8      	str	r0, [r7, #12]
 80003de:	60b9      	str	r1, [r7, #8]
 80003e0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80003e2:	2300      	movs	r3, #0
 80003e4:	617b      	str	r3, [r7, #20]
 80003e6:	e009      	b.n	80003fc <_write+0x26>
  {
    __io_putchar(*ptr++);
 80003e8:	68bb      	ldr	r3, [r7, #8]
 80003ea:	1c5a      	adds	r2, r3, #1
 80003ec:	60ba      	str	r2, [r7, #8]
 80003ee:	781b      	ldrb	r3, [r3, #0]
 80003f0:	4618      	mov	r0, r3
 80003f2:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80003f6:	697b      	ldr	r3, [r7, #20]
 80003f8:	3301      	adds	r3, #1
 80003fa:	617b      	str	r3, [r7, #20]
 80003fc:	697a      	ldr	r2, [r7, #20]
 80003fe:	687b      	ldr	r3, [r7, #4]
 8000400:	429a      	cmp	r2, r3
 8000402:	dbf1      	blt.n	80003e8 <_write+0x12>
  }
  return len;
 8000404:	687b      	ldr	r3, [r7, #4]
}
 8000406:	4618      	mov	r0, r3
 8000408:	3718      	adds	r7, #24
 800040a:	46bd      	mov	sp, r7
 800040c:	bd80      	pop	{r7, pc}

0800040e <_close>:

int _close(int file)
{
 800040e:	b480      	push	{r7}
 8000410:	b083      	sub	sp, #12
 8000412:	af00      	add	r7, sp, #0
 8000414:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000416:	f04f 33ff 	mov.w	r3, #4294967295
}
 800041a:	4618      	mov	r0, r3
 800041c:	370c      	adds	r7, #12
 800041e:	46bd      	mov	sp, r7
 8000420:	bc80      	pop	{r7}
 8000422:	4770      	bx	lr

08000424 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000424:	b480      	push	{r7}
 8000426:	b083      	sub	sp, #12
 8000428:	af00      	add	r7, sp, #0
 800042a:	6078      	str	r0, [r7, #4]
 800042c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800042e:	683b      	ldr	r3, [r7, #0]
 8000430:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000434:	605a      	str	r2, [r3, #4]
  return 0;
 8000436:	2300      	movs	r3, #0
}
 8000438:	4618      	mov	r0, r3
 800043a:	370c      	adds	r7, #12
 800043c:	46bd      	mov	sp, r7
 800043e:	bc80      	pop	{r7}
 8000440:	4770      	bx	lr

08000442 <_isatty>:

int _isatty(int file)
{
 8000442:	b480      	push	{r7}
 8000444:	b083      	sub	sp, #12
 8000446:	af00      	add	r7, sp, #0
 8000448:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800044a:	2301      	movs	r3, #1
}
 800044c:	4618      	mov	r0, r3
 800044e:	370c      	adds	r7, #12
 8000450:	46bd      	mov	sp, r7
 8000452:	bc80      	pop	{r7}
 8000454:	4770      	bx	lr

08000456 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000456:	b480      	push	{r7}
 8000458:	b085      	sub	sp, #20
 800045a:	af00      	add	r7, sp, #0
 800045c:	60f8      	str	r0, [r7, #12]
 800045e:	60b9      	str	r1, [r7, #8]
 8000460:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000462:	2300      	movs	r3, #0
}
 8000464:	4618      	mov	r0, r3
 8000466:	3714      	adds	r7, #20
 8000468:	46bd      	mov	sp, r7
 800046a:	bc80      	pop	{r7}
 800046c:	4770      	bx	lr
	...

08000470 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000470:	b580      	push	{r7, lr}
 8000472:	b086      	sub	sp, #24
 8000474:	af00      	add	r7, sp, #0
 8000476:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000478:	4a14      	ldr	r2, [pc, #80]	@ (80004cc <_sbrk+0x5c>)
 800047a:	4b15      	ldr	r3, [pc, #84]	@ (80004d0 <_sbrk+0x60>)
 800047c:	1ad3      	subs	r3, r2, r3
 800047e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000480:	697b      	ldr	r3, [r7, #20]
 8000482:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000484:	4b13      	ldr	r3, [pc, #76]	@ (80004d4 <_sbrk+0x64>)
 8000486:	681b      	ldr	r3, [r3, #0]
 8000488:	2b00      	cmp	r3, #0
 800048a:	d102      	bne.n	8000492 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800048c:	4b11      	ldr	r3, [pc, #68]	@ (80004d4 <_sbrk+0x64>)
 800048e:	4a12      	ldr	r2, [pc, #72]	@ (80004d8 <_sbrk+0x68>)
 8000490:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000492:	4b10      	ldr	r3, [pc, #64]	@ (80004d4 <_sbrk+0x64>)
 8000494:	681a      	ldr	r2, [r3, #0]
 8000496:	687b      	ldr	r3, [r7, #4]
 8000498:	4413      	add	r3, r2
 800049a:	693a      	ldr	r2, [r7, #16]
 800049c:	429a      	cmp	r2, r3
 800049e:	d207      	bcs.n	80004b0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80004a0:	f000 fdb6 	bl	8001010 <__errno>
 80004a4:	4603      	mov	r3, r0
 80004a6:	220c      	movs	r2, #12
 80004a8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80004aa:	f04f 33ff 	mov.w	r3, #4294967295
 80004ae:	e009      	b.n	80004c4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80004b0:	4b08      	ldr	r3, [pc, #32]	@ (80004d4 <_sbrk+0x64>)
 80004b2:	681b      	ldr	r3, [r3, #0]
 80004b4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80004b6:	4b07      	ldr	r3, [pc, #28]	@ (80004d4 <_sbrk+0x64>)
 80004b8:	681a      	ldr	r2, [r3, #0]
 80004ba:	687b      	ldr	r3, [r7, #4]
 80004bc:	4413      	add	r3, r2
 80004be:	4a05      	ldr	r2, [pc, #20]	@ (80004d4 <_sbrk+0x64>)
 80004c0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80004c2:	68fb      	ldr	r3, [r7, #12]
}
 80004c4:	4618      	mov	r0, r3
 80004c6:	3718      	adds	r7, #24
 80004c8:	46bd      	mov	sp, r7
 80004ca:	bd80      	pop	{r7, pc}
 80004cc:	20005000 	.word	0x20005000
 80004d0:	00000400 	.word	0x00000400
 80004d4:	20000078 	.word	0x20000078
 80004d8:	200001c8 	.word	0x200001c8

080004dc <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80004dc:	480d      	ldr	r0, [pc, #52]	@ (8000514 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80004de:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80004e0:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80004e4:	480c      	ldr	r0, [pc, #48]	@ (8000518 <LoopForever+0x6>)
  ldr r1, =_edata
 80004e6:	490d      	ldr	r1, [pc, #52]	@ (800051c <LoopForever+0xa>)
  ldr r2, =_sidata
 80004e8:	4a0d      	ldr	r2, [pc, #52]	@ (8000520 <LoopForever+0xe>)
  movs r3, #0
 80004ea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80004ec:	e002      	b.n	80004f4 <LoopCopyDataInit>

080004ee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80004ee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80004f0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80004f2:	3304      	adds	r3, #4

080004f4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80004f4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80004f6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80004f8:	d3f9      	bcc.n	80004ee <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80004fa:	4a0a      	ldr	r2, [pc, #40]	@ (8000524 <LoopForever+0x12>)
  ldr r4, =_ebss
 80004fc:	4c0a      	ldr	r4, [pc, #40]	@ (8000528 <LoopForever+0x16>)
  movs r3, #0
 80004fe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000500:	e001      	b.n	8000506 <LoopFillZerobss>

08000502 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000502:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000504:	3204      	adds	r2, #4

08000506 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000506:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000508:	d3fb      	bcc.n	8000502 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800050a:	f000 fd87 	bl	800101c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800050e:	f7ff fe9b 	bl	8000248 <main>

08000512 <LoopForever>:

LoopForever:
  b LoopForever
 8000512:	e7fe      	b.n	8000512 <LoopForever>
  ldr   r0, =_estack
 8000514:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 8000518:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800051c:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8000520:	08001508 	.word	0x08001508
  ldr r2, =_sbss
 8000524:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8000528:	200001c8 	.word	0x200001c8

0800052c <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800052c:	e7fe      	b.n	800052c <ADC1_2_IRQHandler>
	...

08000530 <GPIO_periClockControl>:
 * @return            -  none
 *
 * @Note              -  none

 */
void GPIO_periClockControl(GPIO_RegDef_t *pGPIOx, uint8_t EnorDi){
 8000530:	b480      	push	{r7}
 8000532:	b083      	sub	sp, #12
 8000534:	af00      	add	r7, sp, #0
 8000536:	6078      	str	r0, [r7, #4]
 8000538:	460b      	mov	r3, r1
 800053a:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == ENABLE){
 800053c:	78fb      	ldrb	r3, [r7, #3]
 800053e:	2b01      	cmp	r3, #1
 8000540:	d14c      	bne.n	80005dc <GPIO_periClockControl+0xac>
		if(pGPIOx == GPIOA){
 8000542:	687b      	ldr	r3, [r7, #4]
 8000544:	4a4e      	ldr	r2, [pc, #312]	@ (8000680 <GPIO_periClockControl+0x150>)
 8000546:	4293      	cmp	r3, r2
 8000548:	d106      	bne.n	8000558 <GPIO_periClockControl+0x28>
			GPIOA_PCLK_EN();
 800054a:	4b4e      	ldr	r3, [pc, #312]	@ (8000684 <GPIO_periClockControl+0x154>)
 800054c:	699b      	ldr	r3, [r3, #24]
 800054e:	4a4d      	ldr	r2, [pc, #308]	@ (8000684 <GPIO_periClockControl+0x154>)
 8000550:	f043 0304 	orr.w	r3, r3, #4
 8000554:	6193      	str	r3, [r2, #24]
		}
		else if(pGPIOx == GPIOG){
			GPIOG_PCLK_DI();
		}
	}
}
 8000556:	e08d      	b.n	8000674 <GPIO_periClockControl+0x144>
		else if(pGPIOx == GPIOB){
 8000558:	687b      	ldr	r3, [r7, #4]
 800055a:	4a4b      	ldr	r2, [pc, #300]	@ (8000688 <GPIO_periClockControl+0x158>)
 800055c:	4293      	cmp	r3, r2
 800055e:	d106      	bne.n	800056e <GPIO_periClockControl+0x3e>
			GPIOB_PCLK_EN();
 8000560:	4b48      	ldr	r3, [pc, #288]	@ (8000684 <GPIO_periClockControl+0x154>)
 8000562:	699b      	ldr	r3, [r3, #24]
 8000564:	4a47      	ldr	r2, [pc, #284]	@ (8000684 <GPIO_periClockControl+0x154>)
 8000566:	f043 0308 	orr.w	r3, r3, #8
 800056a:	6193      	str	r3, [r2, #24]
}
 800056c:	e082      	b.n	8000674 <GPIO_periClockControl+0x144>
		else if(pGPIOx == GPIOC){
 800056e:	687b      	ldr	r3, [r7, #4]
 8000570:	4a46      	ldr	r2, [pc, #280]	@ (800068c <GPIO_periClockControl+0x15c>)
 8000572:	4293      	cmp	r3, r2
 8000574:	d106      	bne.n	8000584 <GPIO_periClockControl+0x54>
			GPIOC_PCLK_EN();
 8000576:	4b43      	ldr	r3, [pc, #268]	@ (8000684 <GPIO_periClockControl+0x154>)
 8000578:	699b      	ldr	r3, [r3, #24]
 800057a:	4a42      	ldr	r2, [pc, #264]	@ (8000684 <GPIO_periClockControl+0x154>)
 800057c:	f043 0310 	orr.w	r3, r3, #16
 8000580:	6193      	str	r3, [r2, #24]
}
 8000582:	e077      	b.n	8000674 <GPIO_periClockControl+0x144>
		else if(pGPIOx == GPIOD){
 8000584:	687b      	ldr	r3, [r7, #4]
 8000586:	4a42      	ldr	r2, [pc, #264]	@ (8000690 <GPIO_periClockControl+0x160>)
 8000588:	4293      	cmp	r3, r2
 800058a:	d106      	bne.n	800059a <GPIO_periClockControl+0x6a>
			GPIOD_PCLK_EN();
 800058c:	4b3d      	ldr	r3, [pc, #244]	@ (8000684 <GPIO_periClockControl+0x154>)
 800058e:	699b      	ldr	r3, [r3, #24]
 8000590:	4a3c      	ldr	r2, [pc, #240]	@ (8000684 <GPIO_periClockControl+0x154>)
 8000592:	f043 0320 	orr.w	r3, r3, #32
 8000596:	6193      	str	r3, [r2, #24]
}
 8000598:	e06c      	b.n	8000674 <GPIO_periClockControl+0x144>
		else if(pGPIOx == GPIOE){
 800059a:	687b      	ldr	r3, [r7, #4]
 800059c:	4a3d      	ldr	r2, [pc, #244]	@ (8000694 <GPIO_periClockControl+0x164>)
 800059e:	4293      	cmp	r3, r2
 80005a0:	d106      	bne.n	80005b0 <GPIO_periClockControl+0x80>
			GPIOE_PCLK_EN();
 80005a2:	4b38      	ldr	r3, [pc, #224]	@ (8000684 <GPIO_periClockControl+0x154>)
 80005a4:	699b      	ldr	r3, [r3, #24]
 80005a6:	4a37      	ldr	r2, [pc, #220]	@ (8000684 <GPIO_periClockControl+0x154>)
 80005a8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80005ac:	6193      	str	r3, [r2, #24]
}
 80005ae:	e061      	b.n	8000674 <GPIO_periClockControl+0x144>
		else if(pGPIOx == GPIOF){
 80005b0:	687b      	ldr	r3, [r7, #4]
 80005b2:	4a39      	ldr	r2, [pc, #228]	@ (8000698 <GPIO_periClockControl+0x168>)
 80005b4:	4293      	cmp	r3, r2
 80005b6:	d106      	bne.n	80005c6 <GPIO_periClockControl+0x96>
			GPIOF_PCLK_EN();
 80005b8:	4b32      	ldr	r3, [pc, #200]	@ (8000684 <GPIO_periClockControl+0x154>)
 80005ba:	699b      	ldr	r3, [r3, #24]
 80005bc:	4a31      	ldr	r2, [pc, #196]	@ (8000684 <GPIO_periClockControl+0x154>)
 80005be:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80005c2:	6193      	str	r3, [r2, #24]
}
 80005c4:	e056      	b.n	8000674 <GPIO_periClockControl+0x144>
		else if(pGPIOx == GPIOG){
 80005c6:	687b      	ldr	r3, [r7, #4]
 80005c8:	4a34      	ldr	r2, [pc, #208]	@ (800069c <GPIO_periClockControl+0x16c>)
 80005ca:	4293      	cmp	r3, r2
 80005cc:	d152      	bne.n	8000674 <GPIO_periClockControl+0x144>
			GPIOG_PCLK_EN();
 80005ce:	4b2d      	ldr	r3, [pc, #180]	@ (8000684 <GPIO_periClockControl+0x154>)
 80005d0:	699b      	ldr	r3, [r3, #24]
 80005d2:	4a2c      	ldr	r2, [pc, #176]	@ (8000684 <GPIO_periClockControl+0x154>)
 80005d4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80005d8:	6193      	str	r3, [r2, #24]
}
 80005da:	e04b      	b.n	8000674 <GPIO_periClockControl+0x144>
		if(pGPIOx == GPIOA){
 80005dc:	687b      	ldr	r3, [r7, #4]
 80005de:	4a28      	ldr	r2, [pc, #160]	@ (8000680 <GPIO_periClockControl+0x150>)
 80005e0:	4293      	cmp	r3, r2
 80005e2:	d106      	bne.n	80005f2 <GPIO_periClockControl+0xc2>
			GPIOA_PCLK_DI();
 80005e4:	4b27      	ldr	r3, [pc, #156]	@ (8000684 <GPIO_periClockControl+0x154>)
 80005e6:	699b      	ldr	r3, [r3, #24]
 80005e8:	4a26      	ldr	r2, [pc, #152]	@ (8000684 <GPIO_periClockControl+0x154>)
 80005ea:	f023 0304 	bic.w	r3, r3, #4
 80005ee:	6193      	str	r3, [r2, #24]
}
 80005f0:	e040      	b.n	8000674 <GPIO_periClockControl+0x144>
		else if(pGPIOx == GPIOB){
 80005f2:	687b      	ldr	r3, [r7, #4]
 80005f4:	4a24      	ldr	r2, [pc, #144]	@ (8000688 <GPIO_periClockControl+0x158>)
 80005f6:	4293      	cmp	r3, r2
 80005f8:	d106      	bne.n	8000608 <GPIO_periClockControl+0xd8>
			GPIOB_PCLK_DI();
 80005fa:	4b22      	ldr	r3, [pc, #136]	@ (8000684 <GPIO_periClockControl+0x154>)
 80005fc:	699b      	ldr	r3, [r3, #24]
 80005fe:	4a21      	ldr	r2, [pc, #132]	@ (8000684 <GPIO_periClockControl+0x154>)
 8000600:	f023 0308 	bic.w	r3, r3, #8
 8000604:	6193      	str	r3, [r2, #24]
}
 8000606:	e035      	b.n	8000674 <GPIO_periClockControl+0x144>
		else if(pGPIOx == GPIOC){
 8000608:	687b      	ldr	r3, [r7, #4]
 800060a:	4a20      	ldr	r2, [pc, #128]	@ (800068c <GPIO_periClockControl+0x15c>)
 800060c:	4293      	cmp	r3, r2
 800060e:	d106      	bne.n	800061e <GPIO_periClockControl+0xee>
			GPIOC_PCLK_DI();
 8000610:	4b1c      	ldr	r3, [pc, #112]	@ (8000684 <GPIO_periClockControl+0x154>)
 8000612:	699b      	ldr	r3, [r3, #24]
 8000614:	4a1b      	ldr	r2, [pc, #108]	@ (8000684 <GPIO_periClockControl+0x154>)
 8000616:	f023 0310 	bic.w	r3, r3, #16
 800061a:	6193      	str	r3, [r2, #24]
}
 800061c:	e02a      	b.n	8000674 <GPIO_periClockControl+0x144>
		else if(pGPIOx == GPIOD){
 800061e:	687b      	ldr	r3, [r7, #4]
 8000620:	4a1b      	ldr	r2, [pc, #108]	@ (8000690 <GPIO_periClockControl+0x160>)
 8000622:	4293      	cmp	r3, r2
 8000624:	d106      	bne.n	8000634 <GPIO_periClockControl+0x104>
			GPIOD_PCLK_DI();
 8000626:	4b17      	ldr	r3, [pc, #92]	@ (8000684 <GPIO_periClockControl+0x154>)
 8000628:	699b      	ldr	r3, [r3, #24]
 800062a:	4a16      	ldr	r2, [pc, #88]	@ (8000684 <GPIO_periClockControl+0x154>)
 800062c:	f023 0320 	bic.w	r3, r3, #32
 8000630:	6193      	str	r3, [r2, #24]
}
 8000632:	e01f      	b.n	8000674 <GPIO_periClockControl+0x144>
		else if(pGPIOx == GPIOE){
 8000634:	687b      	ldr	r3, [r7, #4]
 8000636:	4a17      	ldr	r2, [pc, #92]	@ (8000694 <GPIO_periClockControl+0x164>)
 8000638:	4293      	cmp	r3, r2
 800063a:	d106      	bne.n	800064a <GPIO_periClockControl+0x11a>
			GPIOE_PCLK_DI();
 800063c:	4b11      	ldr	r3, [pc, #68]	@ (8000684 <GPIO_periClockControl+0x154>)
 800063e:	699b      	ldr	r3, [r3, #24]
 8000640:	4a10      	ldr	r2, [pc, #64]	@ (8000684 <GPIO_periClockControl+0x154>)
 8000642:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8000646:	6193      	str	r3, [r2, #24]
}
 8000648:	e014      	b.n	8000674 <GPIO_periClockControl+0x144>
		else if(pGPIOx == GPIOF){
 800064a:	687b      	ldr	r3, [r7, #4]
 800064c:	4a12      	ldr	r2, [pc, #72]	@ (8000698 <GPIO_periClockControl+0x168>)
 800064e:	4293      	cmp	r3, r2
 8000650:	d106      	bne.n	8000660 <GPIO_periClockControl+0x130>
			GPIOF_PCLK_DI();
 8000652:	4b0c      	ldr	r3, [pc, #48]	@ (8000684 <GPIO_periClockControl+0x154>)
 8000654:	699b      	ldr	r3, [r3, #24]
 8000656:	4a0b      	ldr	r2, [pc, #44]	@ (8000684 <GPIO_periClockControl+0x154>)
 8000658:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800065c:	6193      	str	r3, [r2, #24]
}
 800065e:	e009      	b.n	8000674 <GPIO_periClockControl+0x144>
		else if(pGPIOx == GPIOG){
 8000660:	687b      	ldr	r3, [r7, #4]
 8000662:	4a0e      	ldr	r2, [pc, #56]	@ (800069c <GPIO_periClockControl+0x16c>)
 8000664:	4293      	cmp	r3, r2
 8000666:	d105      	bne.n	8000674 <GPIO_periClockControl+0x144>
			GPIOG_PCLK_DI();
 8000668:	4b06      	ldr	r3, [pc, #24]	@ (8000684 <GPIO_periClockControl+0x154>)
 800066a:	699b      	ldr	r3, [r3, #24]
 800066c:	4a05      	ldr	r2, [pc, #20]	@ (8000684 <GPIO_periClockControl+0x154>)
 800066e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8000672:	6193      	str	r3, [r2, #24]
}
 8000674:	bf00      	nop
 8000676:	370c      	adds	r7, #12
 8000678:	46bd      	mov	sp, r7
 800067a:	bc80      	pop	{r7}
 800067c:	4770      	bx	lr
 800067e:	bf00      	nop
 8000680:	40010800 	.word	0x40010800
 8000684:	40021000 	.word	0x40021000
 8000688:	40010c00 	.word	0x40010c00
 800068c:	40011000 	.word	0x40011000
 8000690:	40011400 	.word	0x40011400
 8000694:	40011800 	.word	0x40011800
 8000698:	40011c00 	.word	0x40011c00
 800069c:	40012000 	.word	0x40012000

080006a0 <GPIO_init>:
 *
 * @Note              -

 */

void GPIO_init(GPIO_Handle_t *pGPIOHandle){
 80006a0:	b580      	push	{r7, lr}
 80006a2:	b084      	sub	sp, #16
 80006a4:	af00      	add	r7, sp, #0
 80006a6:	6078      	str	r0, [r7, #4]
	// Enabling the Peripheral Clock
	GPIO_periClockControl(pGPIOHandle->pGPIOx, ENABLE);
 80006a8:	687b      	ldr	r3, [r7, #4]
 80006aa:	681b      	ldr	r3, [r3, #0]
 80006ac:	2101      	movs	r1, #1
 80006ae:	4618      	mov	r0, r3
 80006b0:	f7ff ff3e 	bl	8000530 <GPIO_periClockControl>
	uint32_t temp = 0;
 80006b4:	2300      	movs	r3, #0
 80006b6:	60fb      	str	r3, [r7, #12]
	// 1. configure the mode of GPIO Pin
	// 2. configure the speed
	// 3. configure pull up pull down settings
	// 4. configure the output type
	// 5. configure the alternate functionality
	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_AF_OD_50MHZ){
 80006b8:	687b      	ldr	r3, [r7, #4]
 80006ba:	795b      	ldrb	r3, [r3, #5]
 80006bc:	2b0f      	cmp	r3, #15
 80006be:	d847      	bhi.n	8000750 <GPIO_init+0xb0>
		if (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber <= 7){
 80006c0:	687b      	ldr	r3, [r7, #4]
 80006c2:	791b      	ldrb	r3, [r3, #4]
 80006c4:	2b07      	cmp	r3, #7
 80006c6:	d820      	bhi.n	800070a <GPIO_init+0x6a>
			temp =	(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode	<< (4*pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 80006c8:	687b      	ldr	r3, [r7, #4]
 80006ca:	795b      	ldrb	r3, [r3, #5]
 80006cc:	461a      	mov	r2, r3
 80006ce:	687b      	ldr	r3, [r7, #4]
 80006d0:	791b      	ldrb	r3, [r3, #4]
 80006d2:	009b      	lsls	r3, r3, #2
 80006d4:	fa02 f303 	lsl.w	r3, r2, r3
 80006d8:	60fb      	str	r3, [r7, #12]
			pGPIOHandle->pGPIOx->CRL &= ~(0xF << (4* (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)));
 80006da:	687b      	ldr	r3, [r7, #4]
 80006dc:	681b      	ldr	r3, [r3, #0]
 80006de:	681a      	ldr	r2, [r3, #0]
 80006e0:	687b      	ldr	r3, [r7, #4]
 80006e2:	791b      	ldrb	r3, [r3, #4]
 80006e4:	009b      	lsls	r3, r3, #2
 80006e6:	210f      	movs	r1, #15
 80006e8:	fa01 f303 	lsl.w	r3, r1, r3
 80006ec:	43db      	mvns	r3, r3
 80006ee:	4619      	mov	r1, r3
 80006f0:	687b      	ldr	r3, [r7, #4]
 80006f2:	681b      	ldr	r3, [r3, #0]
 80006f4:	400a      	ands	r2, r1
 80006f6:	601a      	str	r2, [r3, #0]
			pGPIOHandle->pGPIOx->CRL |= temp;
 80006f8:	687b      	ldr	r3, [r7, #4]
 80006fa:	681b      	ldr	r3, [r3, #0]
 80006fc:	6819      	ldr	r1, [r3, #0]
 80006fe:	687b      	ldr	r3, [r7, #4]
 8000700:	681b      	ldr	r3, [r3, #0]
 8000702:	68fa      	ldr	r2, [r7, #12]
 8000704:	430a      	orrs	r2, r1
 8000706:	601a      	str	r2, [r3, #0]
		uint8_t portcode = GPIO_BASEADDR_TO_CODE(pGPIOHandle->pGPIOx);
		AFIO->EXTICR[temp1] = portcode << (temp2*4);
		}


}
 8000708:	e0c6      	b.n	8000898 <GPIO_init+0x1f8>
			temp =	(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode	<< (4* (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber - 8 )));
 800070a:	687b      	ldr	r3, [r7, #4]
 800070c:	795b      	ldrb	r3, [r3, #5]
 800070e:	461a      	mov	r2, r3
 8000710:	687b      	ldr	r3, [r7, #4]
 8000712:	791b      	ldrb	r3, [r3, #4]
 8000714:	3b08      	subs	r3, #8
 8000716:	009b      	lsls	r3, r3, #2
 8000718:	fa02 f303 	lsl.w	r3, r2, r3
 800071c:	60fb      	str	r3, [r7, #12]
			pGPIOHandle->pGPIOx->CRH &= ~(0xF << (4* (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber - 8 )));
 800071e:	687b      	ldr	r3, [r7, #4]
 8000720:	681b      	ldr	r3, [r3, #0]
 8000722:	685a      	ldr	r2, [r3, #4]
 8000724:	687b      	ldr	r3, [r7, #4]
 8000726:	791b      	ldrb	r3, [r3, #4]
 8000728:	3b08      	subs	r3, #8
 800072a:	009b      	lsls	r3, r3, #2
 800072c:	210f      	movs	r1, #15
 800072e:	fa01 f303 	lsl.w	r3, r1, r3
 8000732:	43db      	mvns	r3, r3
 8000734:	4619      	mov	r1, r3
 8000736:	687b      	ldr	r3, [r7, #4]
 8000738:	681b      	ldr	r3, [r3, #0]
 800073a:	400a      	ands	r2, r1
 800073c:	605a      	str	r2, [r3, #4]
			pGPIOHandle->pGPIOx->CRH |= temp;
 800073e:	687b      	ldr	r3, [r7, #4]
 8000740:	681b      	ldr	r3, [r3, #0]
 8000742:	6859      	ldr	r1, [r3, #4]
 8000744:	687b      	ldr	r3, [r7, #4]
 8000746:	681b      	ldr	r3, [r3, #0]
 8000748:	68fa      	ldr	r2, [r7, #12]
 800074a:	430a      	orrs	r2, r1
 800074c:	605a      	str	r2, [r3, #4]
}
 800074e:	e0a3      	b.n	8000898 <GPIO_init+0x1f8>
		if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_FT){
 8000750:	687b      	ldr	r3, [r7, #4]
 8000752:	795b      	ldrb	r3, [r3, #5]
 8000754:	2b10      	cmp	r3, #16
 8000756:	d117      	bne.n	8000788 <GPIO_init+0xe8>
			EXTI->FTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000758:	4b51      	ldr	r3, [pc, #324]	@ (80008a0 <GPIO_init+0x200>)
 800075a:	68db      	ldr	r3, [r3, #12]
 800075c:	687a      	ldr	r2, [r7, #4]
 800075e:	7912      	ldrb	r2, [r2, #4]
 8000760:	4611      	mov	r1, r2
 8000762:	2201      	movs	r2, #1
 8000764:	408a      	lsls	r2, r1
 8000766:	4611      	mov	r1, r2
 8000768:	4a4d      	ldr	r2, [pc, #308]	@ (80008a0 <GPIO_init+0x200>)
 800076a:	430b      	orrs	r3, r1
 800076c:	60d3      	str	r3, [r2, #12]
			EXTI->RTSR &= ~(1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800076e:	4b4c      	ldr	r3, [pc, #304]	@ (80008a0 <GPIO_init+0x200>)
 8000770:	689b      	ldr	r3, [r3, #8]
 8000772:	687a      	ldr	r2, [r7, #4]
 8000774:	7912      	ldrb	r2, [r2, #4]
 8000776:	4611      	mov	r1, r2
 8000778:	2201      	movs	r2, #1
 800077a:	408a      	lsls	r2, r1
 800077c:	43d2      	mvns	r2, r2
 800077e:	4611      	mov	r1, r2
 8000780:	4a47      	ldr	r2, [pc, #284]	@ (80008a0 <GPIO_init+0x200>)
 8000782:	400b      	ands	r3, r1
 8000784:	6093      	str	r3, [r2, #8]
 8000786:	e035      	b.n	80007f4 <GPIO_init+0x154>
		else if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RT){
 8000788:	687b      	ldr	r3, [r7, #4]
 800078a:	795b      	ldrb	r3, [r3, #5]
 800078c:	2b11      	cmp	r3, #17
 800078e:	d117      	bne.n	80007c0 <GPIO_init+0x120>
			EXTI->RTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000790:	4b43      	ldr	r3, [pc, #268]	@ (80008a0 <GPIO_init+0x200>)
 8000792:	689b      	ldr	r3, [r3, #8]
 8000794:	687a      	ldr	r2, [r7, #4]
 8000796:	7912      	ldrb	r2, [r2, #4]
 8000798:	4611      	mov	r1, r2
 800079a:	2201      	movs	r2, #1
 800079c:	408a      	lsls	r2, r1
 800079e:	4611      	mov	r1, r2
 80007a0:	4a3f      	ldr	r2, [pc, #252]	@ (80008a0 <GPIO_init+0x200>)
 80007a2:	430b      	orrs	r3, r1
 80007a4:	6093      	str	r3, [r2, #8]
			EXTI->FTSR &= ~(1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80007a6:	4b3e      	ldr	r3, [pc, #248]	@ (80008a0 <GPIO_init+0x200>)
 80007a8:	68db      	ldr	r3, [r3, #12]
 80007aa:	687a      	ldr	r2, [r7, #4]
 80007ac:	7912      	ldrb	r2, [r2, #4]
 80007ae:	4611      	mov	r1, r2
 80007b0:	2201      	movs	r2, #1
 80007b2:	408a      	lsls	r2, r1
 80007b4:	43d2      	mvns	r2, r2
 80007b6:	4611      	mov	r1, r2
 80007b8:	4a39      	ldr	r2, [pc, #228]	@ (80008a0 <GPIO_init+0x200>)
 80007ba:	400b      	ands	r3, r1
 80007bc:	60d3      	str	r3, [r2, #12]
 80007be:	e019      	b.n	80007f4 <GPIO_init+0x154>
		else if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RFT){
 80007c0:	687b      	ldr	r3, [r7, #4]
 80007c2:	795b      	ldrb	r3, [r3, #5]
 80007c4:	2b12      	cmp	r3, #18
 80007c6:	d115      	bne.n	80007f4 <GPIO_init+0x154>
			EXTI->FTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80007c8:	4b35      	ldr	r3, [pc, #212]	@ (80008a0 <GPIO_init+0x200>)
 80007ca:	68db      	ldr	r3, [r3, #12]
 80007cc:	687a      	ldr	r2, [r7, #4]
 80007ce:	7912      	ldrb	r2, [r2, #4]
 80007d0:	4611      	mov	r1, r2
 80007d2:	2201      	movs	r2, #1
 80007d4:	408a      	lsls	r2, r1
 80007d6:	4611      	mov	r1, r2
 80007d8:	4a31      	ldr	r2, [pc, #196]	@ (80008a0 <GPIO_init+0x200>)
 80007da:	430b      	orrs	r3, r1
 80007dc:	60d3      	str	r3, [r2, #12]
			EXTI->RTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80007de:	4b30      	ldr	r3, [pc, #192]	@ (80008a0 <GPIO_init+0x200>)
 80007e0:	689b      	ldr	r3, [r3, #8]
 80007e2:	687a      	ldr	r2, [r7, #4]
 80007e4:	7912      	ldrb	r2, [r2, #4]
 80007e6:	4611      	mov	r1, r2
 80007e8:	2201      	movs	r2, #1
 80007ea:	408a      	lsls	r2, r1
 80007ec:	4611      	mov	r1, r2
 80007ee:	4a2c      	ldr	r2, [pc, #176]	@ (80008a0 <GPIO_init+0x200>)
 80007f0:	430b      	orrs	r3, r1
 80007f2:	6093      	str	r3, [r2, #8]
		EXTI->IMR |= 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber;
 80007f4:	4b2a      	ldr	r3, [pc, #168]	@ (80008a0 <GPIO_init+0x200>)
 80007f6:	681b      	ldr	r3, [r3, #0]
 80007f8:	687a      	ldr	r2, [r7, #4]
 80007fa:	7912      	ldrb	r2, [r2, #4]
 80007fc:	4611      	mov	r1, r2
 80007fe:	2201      	movs	r2, #1
 8000800:	408a      	lsls	r2, r1
 8000802:	4611      	mov	r1, r2
 8000804:	4a26      	ldr	r2, [pc, #152]	@ (80008a0 <GPIO_init+0x200>)
 8000806:	430b      	orrs	r3, r1
 8000808:	6013      	str	r3, [r2, #0]
		temp1 = (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)/4; //Logic
 800080a:	687b      	ldr	r3, [r7, #4]
 800080c:	791b      	ldrb	r3, [r3, #4]
 800080e:	089b      	lsrs	r3, r3, #2
 8000810:	72fb      	strb	r3, [r7, #11]
		temp2 = (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)%4;
 8000812:	687b      	ldr	r3, [r7, #4]
 8000814:	791b      	ldrb	r3, [r3, #4]
 8000816:	f003 0303 	and.w	r3, r3, #3
 800081a:	72bb      	strb	r3, [r7, #10]
		uint8_t portcode = GPIO_BASEADDR_TO_CODE(pGPIOHandle->pGPIOx);
 800081c:	687b      	ldr	r3, [r7, #4]
 800081e:	681b      	ldr	r3, [r3, #0]
 8000820:	4a20      	ldr	r2, [pc, #128]	@ (80008a4 <GPIO_init+0x204>)
 8000822:	4293      	cmp	r3, r2
 8000824:	d02b      	beq.n	800087e <GPIO_init+0x1de>
 8000826:	687b      	ldr	r3, [r7, #4]
 8000828:	681b      	ldr	r3, [r3, #0]
 800082a:	4a1f      	ldr	r2, [pc, #124]	@ (80008a8 <GPIO_init+0x208>)
 800082c:	4293      	cmp	r3, r2
 800082e:	d024      	beq.n	800087a <GPIO_init+0x1da>
 8000830:	687b      	ldr	r3, [r7, #4]
 8000832:	681b      	ldr	r3, [r3, #0]
 8000834:	4a1d      	ldr	r2, [pc, #116]	@ (80008ac <GPIO_init+0x20c>)
 8000836:	4293      	cmp	r3, r2
 8000838:	d01d      	beq.n	8000876 <GPIO_init+0x1d6>
 800083a:	687b      	ldr	r3, [r7, #4]
 800083c:	681b      	ldr	r3, [r3, #0]
 800083e:	4a1c      	ldr	r2, [pc, #112]	@ (80008b0 <GPIO_init+0x210>)
 8000840:	4293      	cmp	r3, r2
 8000842:	d016      	beq.n	8000872 <GPIO_init+0x1d2>
 8000844:	687b      	ldr	r3, [r7, #4]
 8000846:	681b      	ldr	r3, [r3, #0]
 8000848:	4a1a      	ldr	r2, [pc, #104]	@ (80008b4 <GPIO_init+0x214>)
 800084a:	4293      	cmp	r3, r2
 800084c:	d00f      	beq.n	800086e <GPIO_init+0x1ce>
 800084e:	687b      	ldr	r3, [r7, #4]
 8000850:	681b      	ldr	r3, [r3, #0]
 8000852:	4a19      	ldr	r2, [pc, #100]	@ (80008b8 <GPIO_init+0x218>)
 8000854:	4293      	cmp	r3, r2
 8000856:	d008      	beq.n	800086a <GPIO_init+0x1ca>
 8000858:	687b      	ldr	r3, [r7, #4]
 800085a:	681b      	ldr	r3, [r3, #0]
 800085c:	4a17      	ldr	r2, [pc, #92]	@ (80008bc <GPIO_init+0x21c>)
 800085e:	4293      	cmp	r3, r2
 8000860:	d101      	bne.n	8000866 <GPIO_init+0x1c6>
 8000862:	2306      	movs	r3, #6
 8000864:	e00c      	b.n	8000880 <GPIO_init+0x1e0>
 8000866:	2300      	movs	r3, #0
 8000868:	e00a      	b.n	8000880 <GPIO_init+0x1e0>
 800086a:	2305      	movs	r3, #5
 800086c:	e008      	b.n	8000880 <GPIO_init+0x1e0>
 800086e:	2304      	movs	r3, #4
 8000870:	e006      	b.n	8000880 <GPIO_init+0x1e0>
 8000872:	2303      	movs	r3, #3
 8000874:	e004      	b.n	8000880 <GPIO_init+0x1e0>
 8000876:	2302      	movs	r3, #2
 8000878:	e002      	b.n	8000880 <GPIO_init+0x1e0>
 800087a:	2301      	movs	r3, #1
 800087c:	e000      	b.n	8000880 <GPIO_init+0x1e0>
 800087e:	2300      	movs	r3, #0
 8000880:	727b      	strb	r3, [r7, #9]
		AFIO->EXTICR[temp1] = portcode << (temp2*4);
 8000882:	7a7a      	ldrb	r2, [r7, #9]
 8000884:	7abb      	ldrb	r3, [r7, #10]
 8000886:	009b      	lsls	r3, r3, #2
 8000888:	fa02 f103 	lsl.w	r1, r2, r3
 800088c:	4a0c      	ldr	r2, [pc, #48]	@ (80008c0 <GPIO_init+0x220>)
 800088e:	7afb      	ldrb	r3, [r7, #11]
 8000890:	3302      	adds	r3, #2
 8000892:	009b      	lsls	r3, r3, #2
 8000894:	4413      	add	r3, r2
 8000896:	6059      	str	r1, [r3, #4]
}
 8000898:	bf00      	nop
 800089a:	3710      	adds	r7, #16
 800089c:	46bd      	mov	sp, r7
 800089e:	bd80      	pop	{r7, pc}
 80008a0:	40010400 	.word	0x40010400
 80008a4:	40010800 	.word	0x40010800
 80008a8:	40010c00 	.word	0x40010c00
 80008ac:	40011000 	.word	0x40011000
 80008b0:	40011400 	.word	0x40011400
 80008b4:	40011800 	.word	0x40011800
 80008b8:	40011c00 	.word	0x40011c00
 80008bc:	40012000 	.word	0x40012000
 80008c0:	40010000 	.word	0x40010000

080008c4 <GPIO_ReadFromInputPin>:
 *
 * @Note              -

 */

uint8_t GPIO_ReadFromInputPin(GPIO_RegDef_t *pGPIOx, uint8_t PinNumber){
 80008c4:	b480      	push	{r7}
 80008c6:	b085      	sub	sp, #20
 80008c8:	af00      	add	r7, sp, #0
 80008ca:	6078      	str	r0, [r7, #4]
 80008cc:	460b      	mov	r3, r1
 80008ce:	70fb      	strb	r3, [r7, #3]
	uint8_t value;
	value = (uint8_t)((pGPIOx->IDR >> PinNumber) & 0x00000001);
 80008d0:	687b      	ldr	r3, [r7, #4]
 80008d2:	689a      	ldr	r2, [r3, #8]
 80008d4:	78fb      	ldrb	r3, [r7, #3]
 80008d6:	fa22 f303 	lsr.w	r3, r2, r3
 80008da:	b2db      	uxtb	r3, r3
 80008dc:	f003 0301 	and.w	r3, r3, #1
 80008e0:	73fb      	strb	r3, [r7, #15]
	return value;
 80008e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80008e4:	4618      	mov	r0, r3
 80008e6:	3714      	adds	r7, #20
 80008e8:	46bd      	mov	sp, r7
 80008ea:	bc80      	pop	{r7}
 80008ec:	4770      	bx	lr
	...

080008f0 <SPI_periClockControl>:
 * @return            -  none
 *
 * @Note              -  none

 */
void SPI_periClockControl(SPI_RegDef_t *pSPIx, uint8_t EnorDi){
 80008f0:	b480      	push	{r7}
 80008f2:	b083      	sub	sp, #12
 80008f4:	af00      	add	r7, sp, #0
 80008f6:	6078      	str	r0, [r7, #4]
 80008f8:	460b      	mov	r3, r1
 80008fa:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == ENABLE){
 80008fc:	78fb      	ldrb	r3, [r7, #3]
 80008fe:	2b01      	cmp	r3, #1
 8000900:	d120      	bne.n	8000944 <SPI_periClockControl+0x54>
			if(pSPIx == SPI1){
 8000902:	687b      	ldr	r3, [r7, #4]
 8000904:	4a22      	ldr	r2, [pc, #136]	@ (8000990 <SPI_periClockControl+0xa0>)
 8000906:	4293      	cmp	r3, r2
 8000908:	d106      	bne.n	8000918 <SPI_periClockControl+0x28>
				SPI1_PCLK_EN();
 800090a:	4b22      	ldr	r3, [pc, #136]	@ (8000994 <SPI_periClockControl+0xa4>)
 800090c:	699b      	ldr	r3, [r3, #24]
 800090e:	4a21      	ldr	r2, [pc, #132]	@ (8000994 <SPI_periClockControl+0xa4>)
 8000910:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000914:	6193      	str	r3, [r2, #24]
			}
			else if(pSPIx == SPI3){
				SPI3_PCLK_DI();
			}
		}
}
 8000916:	e035      	b.n	8000984 <SPI_periClockControl+0x94>
			else if(pSPIx == SPI2){
 8000918:	687b      	ldr	r3, [r7, #4]
 800091a:	4a1f      	ldr	r2, [pc, #124]	@ (8000998 <SPI_periClockControl+0xa8>)
 800091c:	4293      	cmp	r3, r2
 800091e:	d106      	bne.n	800092e <SPI_periClockControl+0x3e>
				SPI2_PCLK_EN();
 8000920:	4b1c      	ldr	r3, [pc, #112]	@ (8000994 <SPI_periClockControl+0xa4>)
 8000922:	69db      	ldr	r3, [r3, #28]
 8000924:	4a1b      	ldr	r2, [pc, #108]	@ (8000994 <SPI_periClockControl+0xa4>)
 8000926:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800092a:	61d3      	str	r3, [r2, #28]
}
 800092c:	e02a      	b.n	8000984 <SPI_periClockControl+0x94>
			else if(pSPIx == SPI3){
 800092e:	687b      	ldr	r3, [r7, #4]
 8000930:	4a1a      	ldr	r2, [pc, #104]	@ (800099c <SPI_periClockControl+0xac>)
 8000932:	4293      	cmp	r3, r2
 8000934:	d126      	bne.n	8000984 <SPI_periClockControl+0x94>
				SPI3_PCLK_EN();
 8000936:	4b17      	ldr	r3, [pc, #92]	@ (8000994 <SPI_periClockControl+0xa4>)
 8000938:	69db      	ldr	r3, [r3, #28]
 800093a:	4a16      	ldr	r2, [pc, #88]	@ (8000994 <SPI_periClockControl+0xa4>)
 800093c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000940:	61d3      	str	r3, [r2, #28]
}
 8000942:	e01f      	b.n	8000984 <SPI_periClockControl+0x94>
			if(pSPIx == SPI1){
 8000944:	687b      	ldr	r3, [r7, #4]
 8000946:	4a12      	ldr	r2, [pc, #72]	@ (8000990 <SPI_periClockControl+0xa0>)
 8000948:	4293      	cmp	r3, r2
 800094a:	d106      	bne.n	800095a <SPI_periClockControl+0x6a>
				SPI1_PCLK_DI();
 800094c:	4b11      	ldr	r3, [pc, #68]	@ (8000994 <SPI_periClockControl+0xa4>)
 800094e:	699b      	ldr	r3, [r3, #24]
 8000950:	4a10      	ldr	r2, [pc, #64]	@ (8000994 <SPI_periClockControl+0xa4>)
 8000952:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8000956:	6193      	str	r3, [r2, #24]
}
 8000958:	e014      	b.n	8000984 <SPI_periClockControl+0x94>
			else if(pSPIx == SPI2){
 800095a:	687b      	ldr	r3, [r7, #4]
 800095c:	4a0e      	ldr	r2, [pc, #56]	@ (8000998 <SPI_periClockControl+0xa8>)
 800095e:	4293      	cmp	r3, r2
 8000960:	d106      	bne.n	8000970 <SPI_periClockControl+0x80>
				SPI2_PCLK_DI();
 8000962:	4b0c      	ldr	r3, [pc, #48]	@ (8000994 <SPI_periClockControl+0xa4>)
 8000964:	69db      	ldr	r3, [r3, #28]
 8000966:	4a0b      	ldr	r2, [pc, #44]	@ (8000994 <SPI_periClockControl+0xa4>)
 8000968:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800096c:	61d3      	str	r3, [r2, #28]
}
 800096e:	e009      	b.n	8000984 <SPI_periClockControl+0x94>
			else if(pSPIx == SPI3){
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	4a0a      	ldr	r2, [pc, #40]	@ (800099c <SPI_periClockControl+0xac>)
 8000974:	4293      	cmp	r3, r2
 8000976:	d105      	bne.n	8000984 <SPI_periClockControl+0x94>
				SPI3_PCLK_DI();
 8000978:	4b06      	ldr	r3, [pc, #24]	@ (8000994 <SPI_periClockControl+0xa4>)
 800097a:	69db      	ldr	r3, [r3, #28]
 800097c:	4a05      	ldr	r2, [pc, #20]	@ (8000994 <SPI_periClockControl+0xa4>)
 800097e:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8000982:	61d3      	str	r3, [r2, #28]
}
 8000984:	bf00      	nop
 8000986:	370c      	adds	r7, #12
 8000988:	46bd      	mov	sp, r7
 800098a:	bc80      	pop	{r7}
 800098c:	4770      	bx	lr
 800098e:	bf00      	nop
 8000990:	40013000 	.word	0x40013000
 8000994:	40021000 	.word	0x40021000
 8000998:	40003800 	.word	0x40003800
 800099c:	40003c00 	.word	0x40003c00

080009a0 <SPI_init>:
 * @return            -
 *
 * @Note              -

 */
void SPI_init(SPI_Handle_t *pSPIHandle){
 80009a0:	b580      	push	{r7, lr}
 80009a2:	b084      	sub	sp, #16
 80009a4:	af00      	add	r7, sp, #0
 80009a6:	6078      	str	r0, [r7, #4]
	// peripheral clock enable
	SPI_periClockControl(pSPIHandle->pSPIx, ENABLE);
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	681b      	ldr	r3, [r3, #0]
 80009ac:	2101      	movs	r1, #1
 80009ae:	4618      	mov	r0, r3
 80009b0:	f7ff ff9e 	bl	80008f0 <SPI_periClockControl>
	// configure the SPI_CR1 register
	uint32_t tempreg=0;
 80009b4:	2300      	movs	r3, #0
 80009b6:	60fb      	str	r3, [r7, #12]

	//1. Configure the device mode
	tempreg |= pSPIHandle->SPIConfig.SPI_DeviceMode << 2;
 80009b8:	687b      	ldr	r3, [r7, #4]
 80009ba:	791b      	ldrb	r3, [r3, #4]
 80009bc:	009b      	lsls	r3, r3, #2
 80009be:	68fa      	ldr	r2, [r7, #12]
 80009c0:	4313      	orrs	r3, r2
 80009c2:	60fb      	str	r3, [r7, #12]

	//2. Configure the BusConfig
	if(pSPIHandle->SPIConfig.SPI_BusConfig == SPI_BUS_CONFIG_FD){
 80009c4:	687b      	ldr	r3, [r7, #4]
 80009c6:	795b      	ldrb	r3, [r3, #5]
 80009c8:	2b01      	cmp	r3, #1
 80009ca:	d104      	bne.n	80009d6 <SPI_init+0x36>
		// BIDIMODE will 0
		tempreg &= ~(1 << 15);
 80009cc:	68fb      	ldr	r3, [r7, #12]
 80009ce:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80009d2:	60fb      	str	r3, [r7, #12]
 80009d4:	e014      	b.n	8000a00 <SPI_init+0x60>
	}
	else if(pSPIHandle->SPIConfig.SPI_BusConfig == SPI_BUS_CONFIG_HD){
 80009d6:	687b      	ldr	r3, [r7, #4]
 80009d8:	795b      	ldrb	r3, [r3, #5]
 80009da:	2b02      	cmp	r3, #2
 80009dc:	d104      	bne.n	80009e8 <SPI_init+0x48>
		// BIDIMODE will be 1
		tempreg |= (1 << 15);
 80009de:	68fb      	ldr	r3, [r7, #12]
 80009e0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80009e4:	60fb      	str	r3, [r7, #12]
 80009e6:	e00b      	b.n	8000a00 <SPI_init+0x60>
	}
	else if(pSPIHandle->SPIConfig.SPI_BusConfig == SPI_BUS_CONFIG_SIMPLEX_RXONLY){
 80009e8:	687b      	ldr	r3, [r7, #4]
 80009ea:	795b      	ldrb	r3, [r3, #5]
 80009ec:	2b03      	cmp	r3, #3
 80009ee:	d107      	bne.n	8000a00 <SPI_init+0x60>
		//1. BIDIMODE will be 0
		tempreg &= ~(1 << 15);
 80009f0:	68fb      	ldr	r3, [r7, #12]
 80009f2:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80009f6:	60fb      	str	r3, [r7, #12]
		//2. RXONLY will be 1
		tempreg |= (1 << 10);
 80009f8:	68fb      	ldr	r3, [r7, #12]
 80009fa:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80009fe:	60fb      	str	r3, [r7, #12]
	}

	//3. Configure the speed of serial clock (baud rate)
	tempreg |= pSPIHandle->SPIConfig.SPI_SClkSpeed << SPI_CR1_BR;
 8000a00:	687b      	ldr	r3, [r7, #4]
 8000a02:	799b      	ldrb	r3, [r3, #6]
 8000a04:	00db      	lsls	r3, r3, #3
 8000a06:	68fa      	ldr	r2, [r7, #12]
 8000a08:	4313      	orrs	r3, r2
 8000a0a:	60fb      	str	r3, [r7, #12]
	//4. Configure the DFF
	tempreg |= pSPIHandle->SPIConfig.SPI_DFF << SPI_CR1_DFF;
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	79db      	ldrb	r3, [r3, #7]
 8000a10:	02db      	lsls	r3, r3, #11
 8000a12:	68fa      	ldr	r2, [r7, #12]
 8000a14:	4313      	orrs	r3, r2
 8000a16:	60fb      	str	r3, [r7, #12]
	//5. Configure the clock polarity
	tempreg |= pSPIHandle->SPIConfig.SPI_CPOL << SPI_CR1_CPOL;
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	7a1b      	ldrb	r3, [r3, #8]
 8000a1c:	005b      	lsls	r3, r3, #1
 8000a1e:	68fa      	ldr	r2, [r7, #12]
 8000a20:	4313      	orrs	r3, r2
 8000a22:	60fb      	str	r3, [r7, #12]
	//6. Configure the clock phase
	tempreg |= pSPIHandle->SPIConfig.SPI_CPHA << SPI_CR1_CPHA;
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	7a5b      	ldrb	r3, [r3, #9]
 8000a28:	461a      	mov	r2, r3
 8000a2a:	68fb      	ldr	r3, [r7, #12]
 8000a2c:	4313      	orrs	r3, r2
 8000a2e:	60fb      	str	r3, [r7, #12]
	//7. Configuring Slave Select Management
	tempreg |= pSPIHandle->SPIConfig.SPI_SSM << SPI_CR1_SSM;
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	7a9b      	ldrb	r3, [r3, #10]
 8000a34:	025b      	lsls	r3, r3, #9
 8000a36:	68fa      	ldr	r2, [r7, #12]
 8000a38:	4313      	orrs	r3, r2
 8000a3a:	60fb      	str	r3, [r7, #12]

	pSPIHandle->pSPIx->SPI_CR1 = tempreg;
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	681b      	ldr	r3, [r3, #0]
 8000a40:	68fa      	ldr	r2, [r7, #12]
 8000a42:	601a      	str	r2, [r3, #0]
}
 8000a44:	bf00      	nop
 8000a46:	3710      	adds	r7, #16
 8000a48:	46bd      	mov	sp, r7
 8000a4a:	bd80      	pop	{r7, pc}

08000a4c <SPI_SendData>:
 *
 * @Note              -

 */

void SPI_SendData(SPI_RegDef_t *pSPIx, uint8_t *pTxBuffer, uint32_t Len){
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	b084      	sub	sp, #16
 8000a50:	af00      	add	r7, sp, #0
 8000a52:	60f8      	str	r0, [r7, #12]
 8000a54:	60b9      	str	r1, [r7, #8]
 8000a56:	607a      	str	r2, [r7, #4]
	while(Len > 0){
 8000a58:	e027      	b.n	8000aaa <SPI_SendData+0x5e>
		//1. wait for TXE flag to SET
		while(SPI_GetFlagStatus(pSPIx, SPI_TXE_FLAG) == FLAG_RESET);
 8000a5a:	bf00      	nop
 8000a5c:	2102      	movs	r1, #2
 8000a5e:	68f8      	ldr	r0, [r7, #12]
 8000a60:	f000 f862 	bl	8000b28 <SPI_GetFlagStatus>
 8000a64:	4603      	mov	r3, r0
 8000a66:	2b00      	cmp	r3, #0
 8000a68:	d0f8      	beq.n	8000a5c <SPI_SendData+0x10>
		//2. Check DFF bit in CR1
		if(pSPIx->SPI_CR1 & (1 << SPI_CR1_DFF)){
 8000a6a:	68fb      	ldr	r3, [r7, #12]
 8000a6c:	681b      	ldr	r3, [r3, #0]
 8000a6e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8000a72:	2b00      	cmp	r3, #0
 8000a74:	d00e      	beq.n	8000a94 <SPI_SendData+0x48>
			// 16bit frame
			pSPIx->SPI_DR = *((uint16_t *)pTxBuffer);
 8000a76:	68bb      	ldr	r3, [r7, #8]
 8000a78:	881b      	ldrh	r3, [r3, #0]
 8000a7a:	461a      	mov	r2, r3
 8000a7c:	68fb      	ldr	r3, [r7, #12]
 8000a7e:	60da      	str	r2, [r3, #12]
			Len--;
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	3b01      	subs	r3, #1
 8000a84:	607b      	str	r3, [r7, #4]
			Len--;
 8000a86:	687b      	ldr	r3, [r7, #4]
 8000a88:	3b01      	subs	r3, #1
 8000a8a:	607b      	str	r3, [r7, #4]
			(uint16_t *)pTxBuffer++;
 8000a8c:	68bb      	ldr	r3, [r7, #8]
 8000a8e:	3301      	adds	r3, #1
 8000a90:	60bb      	str	r3, [r7, #8]
 8000a92:	e00a      	b.n	8000aaa <SPI_SendData+0x5e>
		}
		else{
			// 8bit frame
			pSPIx->SPI_DR = *pTxBuffer;
 8000a94:	68bb      	ldr	r3, [r7, #8]
 8000a96:	781b      	ldrb	r3, [r3, #0]
 8000a98:	461a      	mov	r2, r3
 8000a9a:	68fb      	ldr	r3, [r7, #12]
 8000a9c:	60da      	str	r2, [r3, #12]
			Len--;
 8000a9e:	687b      	ldr	r3, [r7, #4]
 8000aa0:	3b01      	subs	r3, #1
 8000aa2:	607b      	str	r3, [r7, #4]
			pTxBuffer++;
 8000aa4:	68bb      	ldr	r3, [r7, #8]
 8000aa6:	3301      	adds	r3, #1
 8000aa8:	60bb      	str	r3, [r7, #8]
	while(Len > 0){
 8000aaa:	687b      	ldr	r3, [r7, #4]
 8000aac:	2b00      	cmp	r3, #0
 8000aae:	d1d4      	bne.n	8000a5a <SPI_SendData+0xe>
		}
	}
}
 8000ab0:	bf00      	nop
 8000ab2:	bf00      	nop
 8000ab4:	3710      	adds	r7, #16
 8000ab6:	46bd      	mov	sp, r7
 8000ab8:	bd80      	pop	{r7, pc}

08000aba <SPI_ReceiveData>:
 *
 * @Note              -

 */

void SPI_ReceiveData(SPI_RegDef_t *pSPIx, uint8_t *pRxBuffer, uint32_t Len){
 8000aba:	b580      	push	{r7, lr}
 8000abc:	b084      	sub	sp, #16
 8000abe:	af00      	add	r7, sp, #0
 8000ac0:	60f8      	str	r0, [r7, #12]
 8000ac2:	60b9      	str	r1, [r7, #8]
 8000ac4:	607a      	str	r2, [r7, #4]
	while(Len > 0){
 8000ac6:	e027      	b.n	8000b18 <SPI_ReceiveData+0x5e>
			//1. wait for RXNE flag to SET
			while(SPI_GetFlagStatus(pSPIx, SPI_RXNE_FLAG) == FLAG_RESET);
 8000ac8:	bf00      	nop
 8000aca:	2101      	movs	r1, #1
 8000acc:	68f8      	ldr	r0, [r7, #12]
 8000ace:	f000 f82b 	bl	8000b28 <SPI_GetFlagStatus>
 8000ad2:	4603      	mov	r3, r0
 8000ad4:	2b00      	cmp	r3, #0
 8000ad6:	d0f8      	beq.n	8000aca <SPI_ReceiveData+0x10>
			//2. Check DFF bit in CR1
			if(pSPIx->SPI_CR1 & (1 << SPI_CR1_DFF)){
 8000ad8:	68fb      	ldr	r3, [r7, #12]
 8000ada:	681b      	ldr	r3, [r3, #0]
 8000adc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8000ae0:	2b00      	cmp	r3, #0
 8000ae2:	d00e      	beq.n	8000b02 <SPI_ReceiveData+0x48>
				// 16bit frame
				// Load the data from DR to Rxbuffer,
				*((uint16_t *)pRxBuffer) = pSPIx->SPI_DR;
 8000ae4:	68fb      	ldr	r3, [r7, #12]
 8000ae6:	68db      	ldr	r3, [r3, #12]
 8000ae8:	b29a      	uxth	r2, r3
 8000aea:	68bb      	ldr	r3, [r7, #8]
 8000aec:	801a      	strh	r2, [r3, #0]
				Len--;
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	3b01      	subs	r3, #1
 8000af2:	607b      	str	r3, [r7, #4]
				Len--;
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	3b01      	subs	r3, #1
 8000af8:	607b      	str	r3, [r7, #4]
				(uint16_t *)pRxBuffer++;
 8000afa:	68bb      	ldr	r3, [r7, #8]
 8000afc:	3301      	adds	r3, #1
 8000afe:	60bb      	str	r3, [r7, #8]
 8000b00:	e00a      	b.n	8000b18 <SPI_ReceiveData+0x5e>
			}
			else{
				// 8bit frame
				*pRxBuffer = pSPIx->SPI_DR;
 8000b02:	68fb      	ldr	r3, [r7, #12]
 8000b04:	68db      	ldr	r3, [r3, #12]
 8000b06:	b2da      	uxtb	r2, r3
 8000b08:	68bb      	ldr	r3, [r7, #8]
 8000b0a:	701a      	strb	r2, [r3, #0]
				Len--;
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	3b01      	subs	r3, #1
 8000b10:	607b      	str	r3, [r7, #4]
				pRxBuffer++;
 8000b12:	68bb      	ldr	r3, [r7, #8]
 8000b14:	3301      	adds	r3, #1
 8000b16:	60bb      	str	r3, [r7, #8]
	while(Len > 0){
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	2b00      	cmp	r3, #0
 8000b1c:	d1d4      	bne.n	8000ac8 <SPI_ReceiveData+0xe>
			}
		}
}
 8000b1e:	bf00      	nop
 8000b20:	bf00      	nop
 8000b22:	3710      	adds	r7, #16
 8000b24:	46bd      	mov	sp, r7
 8000b26:	bd80      	pop	{r7, pc}

08000b28 <SPI_GetFlagStatus>:
 *
 * @Note              -

 */

uint8_t SPI_GetFlagStatus(SPI_RegDef_t *pSPIx, uint32_t FlagName){
 8000b28:	b480      	push	{r7}
 8000b2a:	b083      	sub	sp, #12
 8000b2c:	af00      	add	r7, sp, #0
 8000b2e:	6078      	str	r0, [r7, #4]
 8000b30:	6039      	str	r1, [r7, #0]
	if(pSPIx->SPI_SR & FlagName){
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	689a      	ldr	r2, [r3, #8]
 8000b36:	683b      	ldr	r3, [r7, #0]
 8000b38:	4013      	ands	r3, r2
 8000b3a:	2b00      	cmp	r3, #0
 8000b3c:	d001      	beq.n	8000b42 <SPI_GetFlagStatus+0x1a>
		return FLAG_SET;
 8000b3e:	2301      	movs	r3, #1
 8000b40:	e000      	b.n	8000b44 <SPI_GetFlagStatus+0x1c>
	}
	else{
		return FLAG_RESET;
 8000b42:	2300      	movs	r3, #0
	}
}
 8000b44:	4618      	mov	r0, r3
 8000b46:	370c      	adds	r7, #12
 8000b48:	46bd      	mov	sp, r7
 8000b4a:	bc80      	pop	{r7}
 8000b4c:	4770      	bx	lr

08000b4e <SPI_PeripheralControl>:
 *
 * @Note              -

 */

void SPI_PeripheralControl(SPI_RegDef_t *pSPIx, uint8_t EnOrDi){
 8000b4e:	b480      	push	{r7}
 8000b50:	b083      	sub	sp, #12
 8000b52:	af00      	add	r7, sp, #0
 8000b54:	6078      	str	r0, [r7, #4]
 8000b56:	460b      	mov	r3, r1
 8000b58:	70fb      	strb	r3, [r7, #3]
	if(EnOrDi == ENABLE){
 8000b5a:	78fb      	ldrb	r3, [r7, #3]
 8000b5c:	2b01      	cmp	r3, #1
 8000b5e:	d106      	bne.n	8000b6e <SPI_PeripheralControl+0x20>
		pSPIx->SPI_CR1 |= (1<< SPI_CR1_SPE);
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	681b      	ldr	r3, [r3, #0]
 8000b64:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	601a      	str	r2, [r3, #0]
	}
	else{
		pSPIx->SPI_CR1 &= ~(1<< SPI_CR1_SPE);
	}
}
 8000b6c:	e005      	b.n	8000b7a <SPI_PeripheralControl+0x2c>
		pSPIx->SPI_CR1 &= ~(1<< SPI_CR1_SPE);
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	681b      	ldr	r3, [r3, #0]
 8000b72:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	601a      	str	r2, [r3, #0]
}
 8000b7a:	bf00      	nop
 8000b7c:	370c      	adds	r7, #12
 8000b7e:	46bd      	mov	sp, r7
 8000b80:	bc80      	pop	{r7}
 8000b82:	4770      	bx	lr

08000b84 <std>:
 8000b84:	2300      	movs	r3, #0
 8000b86:	b510      	push	{r4, lr}
 8000b88:	4604      	mov	r4, r0
 8000b8a:	e9c0 3300 	strd	r3, r3, [r0]
 8000b8e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8000b92:	6083      	str	r3, [r0, #8]
 8000b94:	8181      	strh	r1, [r0, #12]
 8000b96:	6643      	str	r3, [r0, #100]	@ 0x64
 8000b98:	81c2      	strh	r2, [r0, #14]
 8000b9a:	6183      	str	r3, [r0, #24]
 8000b9c:	4619      	mov	r1, r3
 8000b9e:	2208      	movs	r2, #8
 8000ba0:	305c      	adds	r0, #92	@ 0x5c
 8000ba2:	f000 f9e7 	bl	8000f74 <memset>
 8000ba6:	4b0d      	ldr	r3, [pc, #52]	@ (8000bdc <std+0x58>)
 8000ba8:	6224      	str	r4, [r4, #32]
 8000baa:	6263      	str	r3, [r4, #36]	@ 0x24
 8000bac:	4b0c      	ldr	r3, [pc, #48]	@ (8000be0 <std+0x5c>)
 8000bae:	62a3      	str	r3, [r4, #40]	@ 0x28
 8000bb0:	4b0c      	ldr	r3, [pc, #48]	@ (8000be4 <std+0x60>)
 8000bb2:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8000bb4:	4b0c      	ldr	r3, [pc, #48]	@ (8000be8 <std+0x64>)
 8000bb6:	6323      	str	r3, [r4, #48]	@ 0x30
 8000bb8:	4b0c      	ldr	r3, [pc, #48]	@ (8000bec <std+0x68>)
 8000bba:	429c      	cmp	r4, r3
 8000bbc:	d006      	beq.n	8000bcc <std+0x48>
 8000bbe:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8000bc2:	4294      	cmp	r4, r2
 8000bc4:	d002      	beq.n	8000bcc <std+0x48>
 8000bc6:	33d0      	adds	r3, #208	@ 0xd0
 8000bc8:	429c      	cmp	r4, r3
 8000bca:	d105      	bne.n	8000bd8 <std+0x54>
 8000bcc:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8000bd0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000bd4:	f000 ba46 	b.w	8001064 <__retarget_lock_init_recursive>
 8000bd8:	bd10      	pop	{r4, pc}
 8000bda:	bf00      	nop
 8000bdc:	08000dc5 	.word	0x08000dc5
 8000be0:	08000de7 	.word	0x08000de7
 8000be4:	08000e1f 	.word	0x08000e1f
 8000be8:	08000e43 	.word	0x08000e43
 8000bec:	2000007c 	.word	0x2000007c

08000bf0 <stdio_exit_handler>:
 8000bf0:	4a02      	ldr	r2, [pc, #8]	@ (8000bfc <stdio_exit_handler+0xc>)
 8000bf2:	4903      	ldr	r1, [pc, #12]	@ (8000c00 <stdio_exit_handler+0x10>)
 8000bf4:	4803      	ldr	r0, [pc, #12]	@ (8000c04 <stdio_exit_handler+0x14>)
 8000bf6:	f000 b869 	b.w	8000ccc <_fwalk_sglue>
 8000bfa:	bf00      	nop
 8000bfc:	20000000 	.word	0x20000000
 8000c00:	08001359 	.word	0x08001359
 8000c04:	20000010 	.word	0x20000010

08000c08 <cleanup_stdio>:
 8000c08:	6841      	ldr	r1, [r0, #4]
 8000c0a:	4b0c      	ldr	r3, [pc, #48]	@ (8000c3c <cleanup_stdio+0x34>)
 8000c0c:	b510      	push	{r4, lr}
 8000c0e:	4299      	cmp	r1, r3
 8000c10:	4604      	mov	r4, r0
 8000c12:	d001      	beq.n	8000c18 <cleanup_stdio+0x10>
 8000c14:	f000 fba0 	bl	8001358 <_fflush_r>
 8000c18:	68a1      	ldr	r1, [r4, #8]
 8000c1a:	4b09      	ldr	r3, [pc, #36]	@ (8000c40 <cleanup_stdio+0x38>)
 8000c1c:	4299      	cmp	r1, r3
 8000c1e:	d002      	beq.n	8000c26 <cleanup_stdio+0x1e>
 8000c20:	4620      	mov	r0, r4
 8000c22:	f000 fb99 	bl	8001358 <_fflush_r>
 8000c26:	68e1      	ldr	r1, [r4, #12]
 8000c28:	4b06      	ldr	r3, [pc, #24]	@ (8000c44 <cleanup_stdio+0x3c>)
 8000c2a:	4299      	cmp	r1, r3
 8000c2c:	d004      	beq.n	8000c38 <cleanup_stdio+0x30>
 8000c2e:	4620      	mov	r0, r4
 8000c30:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000c34:	f000 bb90 	b.w	8001358 <_fflush_r>
 8000c38:	bd10      	pop	{r4, pc}
 8000c3a:	bf00      	nop
 8000c3c:	2000007c 	.word	0x2000007c
 8000c40:	200000e4 	.word	0x200000e4
 8000c44:	2000014c 	.word	0x2000014c

08000c48 <global_stdio_init.part.0>:
 8000c48:	b510      	push	{r4, lr}
 8000c4a:	4b0b      	ldr	r3, [pc, #44]	@ (8000c78 <global_stdio_init.part.0+0x30>)
 8000c4c:	4c0b      	ldr	r4, [pc, #44]	@ (8000c7c <global_stdio_init.part.0+0x34>)
 8000c4e:	4a0c      	ldr	r2, [pc, #48]	@ (8000c80 <global_stdio_init.part.0+0x38>)
 8000c50:	4620      	mov	r0, r4
 8000c52:	601a      	str	r2, [r3, #0]
 8000c54:	2104      	movs	r1, #4
 8000c56:	2200      	movs	r2, #0
 8000c58:	f7ff ff94 	bl	8000b84 <std>
 8000c5c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8000c60:	2201      	movs	r2, #1
 8000c62:	2109      	movs	r1, #9
 8000c64:	f7ff ff8e 	bl	8000b84 <std>
 8000c68:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8000c6c:	2202      	movs	r2, #2
 8000c6e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000c72:	2112      	movs	r1, #18
 8000c74:	f7ff bf86 	b.w	8000b84 <std>
 8000c78:	200001b4 	.word	0x200001b4
 8000c7c:	2000007c 	.word	0x2000007c
 8000c80:	08000bf1 	.word	0x08000bf1

08000c84 <__sfp_lock_acquire>:
 8000c84:	4801      	ldr	r0, [pc, #4]	@ (8000c8c <__sfp_lock_acquire+0x8>)
 8000c86:	f000 b9ee 	b.w	8001066 <__retarget_lock_acquire_recursive>
 8000c8a:	bf00      	nop
 8000c8c:	200001bd 	.word	0x200001bd

08000c90 <__sfp_lock_release>:
 8000c90:	4801      	ldr	r0, [pc, #4]	@ (8000c98 <__sfp_lock_release+0x8>)
 8000c92:	f000 b9e9 	b.w	8001068 <__retarget_lock_release_recursive>
 8000c96:	bf00      	nop
 8000c98:	200001bd 	.word	0x200001bd

08000c9c <__sinit>:
 8000c9c:	b510      	push	{r4, lr}
 8000c9e:	4604      	mov	r4, r0
 8000ca0:	f7ff fff0 	bl	8000c84 <__sfp_lock_acquire>
 8000ca4:	6a23      	ldr	r3, [r4, #32]
 8000ca6:	b11b      	cbz	r3, 8000cb0 <__sinit+0x14>
 8000ca8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000cac:	f7ff bff0 	b.w	8000c90 <__sfp_lock_release>
 8000cb0:	4b04      	ldr	r3, [pc, #16]	@ (8000cc4 <__sinit+0x28>)
 8000cb2:	6223      	str	r3, [r4, #32]
 8000cb4:	4b04      	ldr	r3, [pc, #16]	@ (8000cc8 <__sinit+0x2c>)
 8000cb6:	681b      	ldr	r3, [r3, #0]
 8000cb8:	2b00      	cmp	r3, #0
 8000cba:	d1f5      	bne.n	8000ca8 <__sinit+0xc>
 8000cbc:	f7ff ffc4 	bl	8000c48 <global_stdio_init.part.0>
 8000cc0:	e7f2      	b.n	8000ca8 <__sinit+0xc>
 8000cc2:	bf00      	nop
 8000cc4:	08000c09 	.word	0x08000c09
 8000cc8:	200001b4 	.word	0x200001b4

08000ccc <_fwalk_sglue>:
 8000ccc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000cd0:	4607      	mov	r7, r0
 8000cd2:	4688      	mov	r8, r1
 8000cd4:	4614      	mov	r4, r2
 8000cd6:	2600      	movs	r6, #0
 8000cd8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8000cdc:	f1b9 0901 	subs.w	r9, r9, #1
 8000ce0:	d505      	bpl.n	8000cee <_fwalk_sglue+0x22>
 8000ce2:	6824      	ldr	r4, [r4, #0]
 8000ce4:	2c00      	cmp	r4, #0
 8000ce6:	d1f7      	bne.n	8000cd8 <_fwalk_sglue+0xc>
 8000ce8:	4630      	mov	r0, r6
 8000cea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000cee:	89ab      	ldrh	r3, [r5, #12]
 8000cf0:	2b01      	cmp	r3, #1
 8000cf2:	d907      	bls.n	8000d04 <_fwalk_sglue+0x38>
 8000cf4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8000cf8:	3301      	adds	r3, #1
 8000cfa:	d003      	beq.n	8000d04 <_fwalk_sglue+0x38>
 8000cfc:	4629      	mov	r1, r5
 8000cfe:	4638      	mov	r0, r7
 8000d00:	47c0      	blx	r8
 8000d02:	4306      	orrs	r6, r0
 8000d04:	3568      	adds	r5, #104	@ 0x68
 8000d06:	e7e9      	b.n	8000cdc <_fwalk_sglue+0x10>

08000d08 <_puts_r>:
 8000d08:	6a03      	ldr	r3, [r0, #32]
 8000d0a:	b570      	push	{r4, r5, r6, lr}
 8000d0c:	4605      	mov	r5, r0
 8000d0e:	460e      	mov	r6, r1
 8000d10:	6884      	ldr	r4, [r0, #8]
 8000d12:	b90b      	cbnz	r3, 8000d18 <_puts_r+0x10>
 8000d14:	f7ff ffc2 	bl	8000c9c <__sinit>
 8000d18:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8000d1a:	07db      	lsls	r3, r3, #31
 8000d1c:	d405      	bmi.n	8000d2a <_puts_r+0x22>
 8000d1e:	89a3      	ldrh	r3, [r4, #12]
 8000d20:	0598      	lsls	r0, r3, #22
 8000d22:	d402      	bmi.n	8000d2a <_puts_r+0x22>
 8000d24:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8000d26:	f000 f99e 	bl	8001066 <__retarget_lock_acquire_recursive>
 8000d2a:	89a3      	ldrh	r3, [r4, #12]
 8000d2c:	0719      	lsls	r1, r3, #28
 8000d2e:	d502      	bpl.n	8000d36 <_puts_r+0x2e>
 8000d30:	6923      	ldr	r3, [r4, #16]
 8000d32:	2b00      	cmp	r3, #0
 8000d34:	d135      	bne.n	8000da2 <_puts_r+0x9a>
 8000d36:	4621      	mov	r1, r4
 8000d38:	4628      	mov	r0, r5
 8000d3a:	f000 f8c5 	bl	8000ec8 <__swsetup_r>
 8000d3e:	b380      	cbz	r0, 8000da2 <_puts_r+0x9a>
 8000d40:	f04f 35ff 	mov.w	r5, #4294967295
 8000d44:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8000d46:	07da      	lsls	r2, r3, #31
 8000d48:	d405      	bmi.n	8000d56 <_puts_r+0x4e>
 8000d4a:	89a3      	ldrh	r3, [r4, #12]
 8000d4c:	059b      	lsls	r3, r3, #22
 8000d4e:	d402      	bmi.n	8000d56 <_puts_r+0x4e>
 8000d50:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8000d52:	f000 f989 	bl	8001068 <__retarget_lock_release_recursive>
 8000d56:	4628      	mov	r0, r5
 8000d58:	bd70      	pop	{r4, r5, r6, pc}
 8000d5a:	2b00      	cmp	r3, #0
 8000d5c:	da04      	bge.n	8000d68 <_puts_r+0x60>
 8000d5e:	69a2      	ldr	r2, [r4, #24]
 8000d60:	429a      	cmp	r2, r3
 8000d62:	dc17      	bgt.n	8000d94 <_puts_r+0x8c>
 8000d64:	290a      	cmp	r1, #10
 8000d66:	d015      	beq.n	8000d94 <_puts_r+0x8c>
 8000d68:	6823      	ldr	r3, [r4, #0]
 8000d6a:	1c5a      	adds	r2, r3, #1
 8000d6c:	6022      	str	r2, [r4, #0]
 8000d6e:	7019      	strb	r1, [r3, #0]
 8000d70:	68a3      	ldr	r3, [r4, #8]
 8000d72:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8000d76:	3b01      	subs	r3, #1
 8000d78:	60a3      	str	r3, [r4, #8]
 8000d7a:	2900      	cmp	r1, #0
 8000d7c:	d1ed      	bne.n	8000d5a <_puts_r+0x52>
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	da11      	bge.n	8000da6 <_puts_r+0x9e>
 8000d82:	4622      	mov	r2, r4
 8000d84:	210a      	movs	r1, #10
 8000d86:	4628      	mov	r0, r5
 8000d88:	f000 f85f 	bl	8000e4a <__swbuf_r>
 8000d8c:	3001      	adds	r0, #1
 8000d8e:	d0d7      	beq.n	8000d40 <_puts_r+0x38>
 8000d90:	250a      	movs	r5, #10
 8000d92:	e7d7      	b.n	8000d44 <_puts_r+0x3c>
 8000d94:	4622      	mov	r2, r4
 8000d96:	4628      	mov	r0, r5
 8000d98:	f000 f857 	bl	8000e4a <__swbuf_r>
 8000d9c:	3001      	adds	r0, #1
 8000d9e:	d1e7      	bne.n	8000d70 <_puts_r+0x68>
 8000da0:	e7ce      	b.n	8000d40 <_puts_r+0x38>
 8000da2:	3e01      	subs	r6, #1
 8000da4:	e7e4      	b.n	8000d70 <_puts_r+0x68>
 8000da6:	6823      	ldr	r3, [r4, #0]
 8000da8:	1c5a      	adds	r2, r3, #1
 8000daa:	6022      	str	r2, [r4, #0]
 8000dac:	220a      	movs	r2, #10
 8000dae:	701a      	strb	r2, [r3, #0]
 8000db0:	e7ee      	b.n	8000d90 <_puts_r+0x88>
	...

08000db4 <puts>:
 8000db4:	4b02      	ldr	r3, [pc, #8]	@ (8000dc0 <puts+0xc>)
 8000db6:	4601      	mov	r1, r0
 8000db8:	6818      	ldr	r0, [r3, #0]
 8000dba:	f7ff bfa5 	b.w	8000d08 <_puts_r>
 8000dbe:	bf00      	nop
 8000dc0:	2000000c 	.word	0x2000000c

08000dc4 <__sread>:
 8000dc4:	b510      	push	{r4, lr}
 8000dc6:	460c      	mov	r4, r1
 8000dc8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000dcc:	f000 f8fc 	bl	8000fc8 <_read_r>
 8000dd0:	2800      	cmp	r0, #0
 8000dd2:	bfab      	itete	ge
 8000dd4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8000dd6:	89a3      	ldrhlt	r3, [r4, #12]
 8000dd8:	181b      	addge	r3, r3, r0
 8000dda:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8000dde:	bfac      	ite	ge
 8000de0:	6563      	strge	r3, [r4, #84]	@ 0x54
 8000de2:	81a3      	strhlt	r3, [r4, #12]
 8000de4:	bd10      	pop	{r4, pc}

08000de6 <__swrite>:
 8000de6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000dea:	461f      	mov	r7, r3
 8000dec:	898b      	ldrh	r3, [r1, #12]
 8000dee:	4605      	mov	r5, r0
 8000df0:	05db      	lsls	r3, r3, #23
 8000df2:	460c      	mov	r4, r1
 8000df4:	4616      	mov	r6, r2
 8000df6:	d505      	bpl.n	8000e04 <__swrite+0x1e>
 8000df8:	2302      	movs	r3, #2
 8000dfa:	2200      	movs	r2, #0
 8000dfc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000e00:	f000 f8d0 	bl	8000fa4 <_lseek_r>
 8000e04:	89a3      	ldrh	r3, [r4, #12]
 8000e06:	4632      	mov	r2, r6
 8000e08:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8000e0c:	81a3      	strh	r3, [r4, #12]
 8000e0e:	4628      	mov	r0, r5
 8000e10:	463b      	mov	r3, r7
 8000e12:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8000e16:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8000e1a:	f000 b8e7 	b.w	8000fec <_write_r>

08000e1e <__sseek>:
 8000e1e:	b510      	push	{r4, lr}
 8000e20:	460c      	mov	r4, r1
 8000e22:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000e26:	f000 f8bd 	bl	8000fa4 <_lseek_r>
 8000e2a:	1c43      	adds	r3, r0, #1
 8000e2c:	89a3      	ldrh	r3, [r4, #12]
 8000e2e:	bf15      	itete	ne
 8000e30:	6560      	strne	r0, [r4, #84]	@ 0x54
 8000e32:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8000e36:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8000e3a:	81a3      	strheq	r3, [r4, #12]
 8000e3c:	bf18      	it	ne
 8000e3e:	81a3      	strhne	r3, [r4, #12]
 8000e40:	bd10      	pop	{r4, pc}

08000e42 <__sclose>:
 8000e42:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000e46:	f000 b89d 	b.w	8000f84 <_close_r>

08000e4a <__swbuf_r>:
 8000e4a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000e4c:	460e      	mov	r6, r1
 8000e4e:	4614      	mov	r4, r2
 8000e50:	4605      	mov	r5, r0
 8000e52:	b118      	cbz	r0, 8000e5c <__swbuf_r+0x12>
 8000e54:	6a03      	ldr	r3, [r0, #32]
 8000e56:	b90b      	cbnz	r3, 8000e5c <__swbuf_r+0x12>
 8000e58:	f7ff ff20 	bl	8000c9c <__sinit>
 8000e5c:	69a3      	ldr	r3, [r4, #24]
 8000e5e:	60a3      	str	r3, [r4, #8]
 8000e60:	89a3      	ldrh	r3, [r4, #12]
 8000e62:	071a      	lsls	r2, r3, #28
 8000e64:	d501      	bpl.n	8000e6a <__swbuf_r+0x20>
 8000e66:	6923      	ldr	r3, [r4, #16]
 8000e68:	b943      	cbnz	r3, 8000e7c <__swbuf_r+0x32>
 8000e6a:	4621      	mov	r1, r4
 8000e6c:	4628      	mov	r0, r5
 8000e6e:	f000 f82b 	bl	8000ec8 <__swsetup_r>
 8000e72:	b118      	cbz	r0, 8000e7c <__swbuf_r+0x32>
 8000e74:	f04f 37ff 	mov.w	r7, #4294967295
 8000e78:	4638      	mov	r0, r7
 8000e7a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000e7c:	6823      	ldr	r3, [r4, #0]
 8000e7e:	6922      	ldr	r2, [r4, #16]
 8000e80:	b2f6      	uxtb	r6, r6
 8000e82:	1a98      	subs	r0, r3, r2
 8000e84:	6963      	ldr	r3, [r4, #20]
 8000e86:	4637      	mov	r7, r6
 8000e88:	4283      	cmp	r3, r0
 8000e8a:	dc05      	bgt.n	8000e98 <__swbuf_r+0x4e>
 8000e8c:	4621      	mov	r1, r4
 8000e8e:	4628      	mov	r0, r5
 8000e90:	f000 fa62 	bl	8001358 <_fflush_r>
 8000e94:	2800      	cmp	r0, #0
 8000e96:	d1ed      	bne.n	8000e74 <__swbuf_r+0x2a>
 8000e98:	68a3      	ldr	r3, [r4, #8]
 8000e9a:	3b01      	subs	r3, #1
 8000e9c:	60a3      	str	r3, [r4, #8]
 8000e9e:	6823      	ldr	r3, [r4, #0]
 8000ea0:	1c5a      	adds	r2, r3, #1
 8000ea2:	6022      	str	r2, [r4, #0]
 8000ea4:	701e      	strb	r6, [r3, #0]
 8000ea6:	6962      	ldr	r2, [r4, #20]
 8000ea8:	1c43      	adds	r3, r0, #1
 8000eaa:	429a      	cmp	r2, r3
 8000eac:	d004      	beq.n	8000eb8 <__swbuf_r+0x6e>
 8000eae:	89a3      	ldrh	r3, [r4, #12]
 8000eb0:	07db      	lsls	r3, r3, #31
 8000eb2:	d5e1      	bpl.n	8000e78 <__swbuf_r+0x2e>
 8000eb4:	2e0a      	cmp	r6, #10
 8000eb6:	d1df      	bne.n	8000e78 <__swbuf_r+0x2e>
 8000eb8:	4621      	mov	r1, r4
 8000eba:	4628      	mov	r0, r5
 8000ebc:	f000 fa4c 	bl	8001358 <_fflush_r>
 8000ec0:	2800      	cmp	r0, #0
 8000ec2:	d0d9      	beq.n	8000e78 <__swbuf_r+0x2e>
 8000ec4:	e7d6      	b.n	8000e74 <__swbuf_r+0x2a>
	...

08000ec8 <__swsetup_r>:
 8000ec8:	b538      	push	{r3, r4, r5, lr}
 8000eca:	4b29      	ldr	r3, [pc, #164]	@ (8000f70 <__swsetup_r+0xa8>)
 8000ecc:	4605      	mov	r5, r0
 8000ece:	6818      	ldr	r0, [r3, #0]
 8000ed0:	460c      	mov	r4, r1
 8000ed2:	b118      	cbz	r0, 8000edc <__swsetup_r+0x14>
 8000ed4:	6a03      	ldr	r3, [r0, #32]
 8000ed6:	b90b      	cbnz	r3, 8000edc <__swsetup_r+0x14>
 8000ed8:	f7ff fee0 	bl	8000c9c <__sinit>
 8000edc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000ee0:	0719      	lsls	r1, r3, #28
 8000ee2:	d422      	bmi.n	8000f2a <__swsetup_r+0x62>
 8000ee4:	06da      	lsls	r2, r3, #27
 8000ee6:	d407      	bmi.n	8000ef8 <__swsetup_r+0x30>
 8000ee8:	2209      	movs	r2, #9
 8000eea:	602a      	str	r2, [r5, #0]
 8000eec:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000ef0:	f04f 30ff 	mov.w	r0, #4294967295
 8000ef4:	81a3      	strh	r3, [r4, #12]
 8000ef6:	e033      	b.n	8000f60 <__swsetup_r+0x98>
 8000ef8:	0758      	lsls	r0, r3, #29
 8000efa:	d512      	bpl.n	8000f22 <__swsetup_r+0x5a>
 8000efc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8000efe:	b141      	cbz	r1, 8000f12 <__swsetup_r+0x4a>
 8000f00:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8000f04:	4299      	cmp	r1, r3
 8000f06:	d002      	beq.n	8000f0e <__swsetup_r+0x46>
 8000f08:	4628      	mov	r0, r5
 8000f0a:	f000 f8af 	bl	800106c <_free_r>
 8000f0e:	2300      	movs	r3, #0
 8000f10:	6363      	str	r3, [r4, #52]	@ 0x34
 8000f12:	89a3      	ldrh	r3, [r4, #12]
 8000f14:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8000f18:	81a3      	strh	r3, [r4, #12]
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	6063      	str	r3, [r4, #4]
 8000f1e:	6923      	ldr	r3, [r4, #16]
 8000f20:	6023      	str	r3, [r4, #0]
 8000f22:	89a3      	ldrh	r3, [r4, #12]
 8000f24:	f043 0308 	orr.w	r3, r3, #8
 8000f28:	81a3      	strh	r3, [r4, #12]
 8000f2a:	6923      	ldr	r3, [r4, #16]
 8000f2c:	b94b      	cbnz	r3, 8000f42 <__swsetup_r+0x7a>
 8000f2e:	89a3      	ldrh	r3, [r4, #12]
 8000f30:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8000f34:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8000f38:	d003      	beq.n	8000f42 <__swsetup_r+0x7a>
 8000f3a:	4621      	mov	r1, r4
 8000f3c:	4628      	mov	r0, r5
 8000f3e:	f000 fa58 	bl	80013f2 <__smakebuf_r>
 8000f42:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000f46:	f013 0201 	ands.w	r2, r3, #1
 8000f4a:	d00a      	beq.n	8000f62 <__swsetup_r+0x9a>
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	60a2      	str	r2, [r4, #8]
 8000f50:	6962      	ldr	r2, [r4, #20]
 8000f52:	4252      	negs	r2, r2
 8000f54:	61a2      	str	r2, [r4, #24]
 8000f56:	6922      	ldr	r2, [r4, #16]
 8000f58:	b942      	cbnz	r2, 8000f6c <__swsetup_r+0xa4>
 8000f5a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8000f5e:	d1c5      	bne.n	8000eec <__swsetup_r+0x24>
 8000f60:	bd38      	pop	{r3, r4, r5, pc}
 8000f62:	0799      	lsls	r1, r3, #30
 8000f64:	bf58      	it	pl
 8000f66:	6962      	ldrpl	r2, [r4, #20]
 8000f68:	60a2      	str	r2, [r4, #8]
 8000f6a:	e7f4      	b.n	8000f56 <__swsetup_r+0x8e>
 8000f6c:	2000      	movs	r0, #0
 8000f6e:	e7f7      	b.n	8000f60 <__swsetup_r+0x98>
 8000f70:	2000000c 	.word	0x2000000c

08000f74 <memset>:
 8000f74:	4603      	mov	r3, r0
 8000f76:	4402      	add	r2, r0
 8000f78:	4293      	cmp	r3, r2
 8000f7a:	d100      	bne.n	8000f7e <memset+0xa>
 8000f7c:	4770      	bx	lr
 8000f7e:	f803 1b01 	strb.w	r1, [r3], #1
 8000f82:	e7f9      	b.n	8000f78 <memset+0x4>

08000f84 <_close_r>:
 8000f84:	b538      	push	{r3, r4, r5, lr}
 8000f86:	2300      	movs	r3, #0
 8000f88:	4d05      	ldr	r5, [pc, #20]	@ (8000fa0 <_close_r+0x1c>)
 8000f8a:	4604      	mov	r4, r0
 8000f8c:	4608      	mov	r0, r1
 8000f8e:	602b      	str	r3, [r5, #0]
 8000f90:	f7ff fa3d 	bl	800040e <_close>
 8000f94:	1c43      	adds	r3, r0, #1
 8000f96:	d102      	bne.n	8000f9e <_close_r+0x1a>
 8000f98:	682b      	ldr	r3, [r5, #0]
 8000f9a:	b103      	cbz	r3, 8000f9e <_close_r+0x1a>
 8000f9c:	6023      	str	r3, [r4, #0]
 8000f9e:	bd38      	pop	{r3, r4, r5, pc}
 8000fa0:	200001b8 	.word	0x200001b8

08000fa4 <_lseek_r>:
 8000fa4:	b538      	push	{r3, r4, r5, lr}
 8000fa6:	4604      	mov	r4, r0
 8000fa8:	4608      	mov	r0, r1
 8000faa:	4611      	mov	r1, r2
 8000fac:	2200      	movs	r2, #0
 8000fae:	4d05      	ldr	r5, [pc, #20]	@ (8000fc4 <_lseek_r+0x20>)
 8000fb0:	602a      	str	r2, [r5, #0]
 8000fb2:	461a      	mov	r2, r3
 8000fb4:	f7ff fa4f 	bl	8000456 <_lseek>
 8000fb8:	1c43      	adds	r3, r0, #1
 8000fba:	d102      	bne.n	8000fc2 <_lseek_r+0x1e>
 8000fbc:	682b      	ldr	r3, [r5, #0]
 8000fbe:	b103      	cbz	r3, 8000fc2 <_lseek_r+0x1e>
 8000fc0:	6023      	str	r3, [r4, #0]
 8000fc2:	bd38      	pop	{r3, r4, r5, pc}
 8000fc4:	200001b8 	.word	0x200001b8

08000fc8 <_read_r>:
 8000fc8:	b538      	push	{r3, r4, r5, lr}
 8000fca:	4604      	mov	r4, r0
 8000fcc:	4608      	mov	r0, r1
 8000fce:	4611      	mov	r1, r2
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	4d05      	ldr	r5, [pc, #20]	@ (8000fe8 <_read_r+0x20>)
 8000fd4:	602a      	str	r2, [r5, #0]
 8000fd6:	461a      	mov	r2, r3
 8000fd8:	f7ff f9e0 	bl	800039c <_read>
 8000fdc:	1c43      	adds	r3, r0, #1
 8000fde:	d102      	bne.n	8000fe6 <_read_r+0x1e>
 8000fe0:	682b      	ldr	r3, [r5, #0]
 8000fe2:	b103      	cbz	r3, 8000fe6 <_read_r+0x1e>
 8000fe4:	6023      	str	r3, [r4, #0]
 8000fe6:	bd38      	pop	{r3, r4, r5, pc}
 8000fe8:	200001b8 	.word	0x200001b8

08000fec <_write_r>:
 8000fec:	b538      	push	{r3, r4, r5, lr}
 8000fee:	4604      	mov	r4, r0
 8000ff0:	4608      	mov	r0, r1
 8000ff2:	4611      	mov	r1, r2
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	4d05      	ldr	r5, [pc, #20]	@ (800100c <_write_r+0x20>)
 8000ff8:	602a      	str	r2, [r5, #0]
 8000ffa:	461a      	mov	r2, r3
 8000ffc:	f7ff f9eb 	bl	80003d6 <_write>
 8001000:	1c43      	adds	r3, r0, #1
 8001002:	d102      	bne.n	800100a <_write_r+0x1e>
 8001004:	682b      	ldr	r3, [r5, #0]
 8001006:	b103      	cbz	r3, 800100a <_write_r+0x1e>
 8001008:	6023      	str	r3, [r4, #0]
 800100a:	bd38      	pop	{r3, r4, r5, pc}
 800100c:	200001b8 	.word	0x200001b8

08001010 <__errno>:
 8001010:	4b01      	ldr	r3, [pc, #4]	@ (8001018 <__errno+0x8>)
 8001012:	6818      	ldr	r0, [r3, #0]
 8001014:	4770      	bx	lr
 8001016:	bf00      	nop
 8001018:	2000000c 	.word	0x2000000c

0800101c <__libc_init_array>:
 800101c:	b570      	push	{r4, r5, r6, lr}
 800101e:	2600      	movs	r6, #0
 8001020:	4d0c      	ldr	r5, [pc, #48]	@ (8001054 <__libc_init_array+0x38>)
 8001022:	4c0d      	ldr	r4, [pc, #52]	@ (8001058 <__libc_init_array+0x3c>)
 8001024:	1b64      	subs	r4, r4, r5
 8001026:	10a4      	asrs	r4, r4, #2
 8001028:	42a6      	cmp	r6, r4
 800102a:	d109      	bne.n	8001040 <__libc_init_array+0x24>
 800102c:	f000 fa50 	bl	80014d0 <_init>
 8001030:	2600      	movs	r6, #0
 8001032:	4d0a      	ldr	r5, [pc, #40]	@ (800105c <__libc_init_array+0x40>)
 8001034:	4c0a      	ldr	r4, [pc, #40]	@ (8001060 <__libc_init_array+0x44>)
 8001036:	1b64      	subs	r4, r4, r5
 8001038:	10a4      	asrs	r4, r4, #2
 800103a:	42a6      	cmp	r6, r4
 800103c:	d105      	bne.n	800104a <__libc_init_array+0x2e>
 800103e:	bd70      	pop	{r4, r5, r6, pc}
 8001040:	f855 3b04 	ldr.w	r3, [r5], #4
 8001044:	4798      	blx	r3
 8001046:	3601      	adds	r6, #1
 8001048:	e7ee      	b.n	8001028 <__libc_init_array+0xc>
 800104a:	f855 3b04 	ldr.w	r3, [r5], #4
 800104e:	4798      	blx	r3
 8001050:	3601      	adds	r6, #1
 8001052:	e7f2      	b.n	800103a <__libc_init_array+0x1e>
 8001054:	08001500 	.word	0x08001500
 8001058:	08001500 	.word	0x08001500
 800105c:	08001500 	.word	0x08001500
 8001060:	08001504 	.word	0x08001504

08001064 <__retarget_lock_init_recursive>:
 8001064:	4770      	bx	lr

08001066 <__retarget_lock_acquire_recursive>:
 8001066:	4770      	bx	lr

08001068 <__retarget_lock_release_recursive>:
 8001068:	4770      	bx	lr
	...

0800106c <_free_r>:
 800106c:	b538      	push	{r3, r4, r5, lr}
 800106e:	4605      	mov	r5, r0
 8001070:	2900      	cmp	r1, #0
 8001072:	d040      	beq.n	80010f6 <_free_r+0x8a>
 8001074:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001078:	1f0c      	subs	r4, r1, #4
 800107a:	2b00      	cmp	r3, #0
 800107c:	bfb8      	it	lt
 800107e:	18e4      	addlt	r4, r4, r3
 8001080:	f000 f8de 	bl	8001240 <__malloc_lock>
 8001084:	4a1c      	ldr	r2, [pc, #112]	@ (80010f8 <_free_r+0x8c>)
 8001086:	6813      	ldr	r3, [r2, #0]
 8001088:	b933      	cbnz	r3, 8001098 <_free_r+0x2c>
 800108a:	6063      	str	r3, [r4, #4]
 800108c:	6014      	str	r4, [r2, #0]
 800108e:	4628      	mov	r0, r5
 8001090:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001094:	f000 b8da 	b.w	800124c <__malloc_unlock>
 8001098:	42a3      	cmp	r3, r4
 800109a:	d908      	bls.n	80010ae <_free_r+0x42>
 800109c:	6820      	ldr	r0, [r4, #0]
 800109e:	1821      	adds	r1, r4, r0
 80010a0:	428b      	cmp	r3, r1
 80010a2:	bf01      	itttt	eq
 80010a4:	6819      	ldreq	r1, [r3, #0]
 80010a6:	685b      	ldreq	r3, [r3, #4]
 80010a8:	1809      	addeq	r1, r1, r0
 80010aa:	6021      	streq	r1, [r4, #0]
 80010ac:	e7ed      	b.n	800108a <_free_r+0x1e>
 80010ae:	461a      	mov	r2, r3
 80010b0:	685b      	ldr	r3, [r3, #4]
 80010b2:	b10b      	cbz	r3, 80010b8 <_free_r+0x4c>
 80010b4:	42a3      	cmp	r3, r4
 80010b6:	d9fa      	bls.n	80010ae <_free_r+0x42>
 80010b8:	6811      	ldr	r1, [r2, #0]
 80010ba:	1850      	adds	r0, r2, r1
 80010bc:	42a0      	cmp	r0, r4
 80010be:	d10b      	bne.n	80010d8 <_free_r+0x6c>
 80010c0:	6820      	ldr	r0, [r4, #0]
 80010c2:	4401      	add	r1, r0
 80010c4:	1850      	adds	r0, r2, r1
 80010c6:	4283      	cmp	r3, r0
 80010c8:	6011      	str	r1, [r2, #0]
 80010ca:	d1e0      	bne.n	800108e <_free_r+0x22>
 80010cc:	6818      	ldr	r0, [r3, #0]
 80010ce:	685b      	ldr	r3, [r3, #4]
 80010d0:	4408      	add	r0, r1
 80010d2:	6010      	str	r0, [r2, #0]
 80010d4:	6053      	str	r3, [r2, #4]
 80010d6:	e7da      	b.n	800108e <_free_r+0x22>
 80010d8:	d902      	bls.n	80010e0 <_free_r+0x74>
 80010da:	230c      	movs	r3, #12
 80010dc:	602b      	str	r3, [r5, #0]
 80010de:	e7d6      	b.n	800108e <_free_r+0x22>
 80010e0:	6820      	ldr	r0, [r4, #0]
 80010e2:	1821      	adds	r1, r4, r0
 80010e4:	428b      	cmp	r3, r1
 80010e6:	bf01      	itttt	eq
 80010e8:	6819      	ldreq	r1, [r3, #0]
 80010ea:	685b      	ldreq	r3, [r3, #4]
 80010ec:	1809      	addeq	r1, r1, r0
 80010ee:	6021      	streq	r1, [r4, #0]
 80010f0:	6063      	str	r3, [r4, #4]
 80010f2:	6054      	str	r4, [r2, #4]
 80010f4:	e7cb      	b.n	800108e <_free_r+0x22>
 80010f6:	bd38      	pop	{r3, r4, r5, pc}
 80010f8:	200001c4 	.word	0x200001c4

080010fc <sbrk_aligned>:
 80010fc:	b570      	push	{r4, r5, r6, lr}
 80010fe:	4e0f      	ldr	r6, [pc, #60]	@ (800113c <sbrk_aligned+0x40>)
 8001100:	460c      	mov	r4, r1
 8001102:	6831      	ldr	r1, [r6, #0]
 8001104:	4605      	mov	r5, r0
 8001106:	b911      	cbnz	r1, 800110e <sbrk_aligned+0x12>
 8001108:	f000 f9d2 	bl	80014b0 <_sbrk_r>
 800110c:	6030      	str	r0, [r6, #0]
 800110e:	4621      	mov	r1, r4
 8001110:	4628      	mov	r0, r5
 8001112:	f000 f9cd 	bl	80014b0 <_sbrk_r>
 8001116:	1c43      	adds	r3, r0, #1
 8001118:	d103      	bne.n	8001122 <sbrk_aligned+0x26>
 800111a:	f04f 34ff 	mov.w	r4, #4294967295
 800111e:	4620      	mov	r0, r4
 8001120:	bd70      	pop	{r4, r5, r6, pc}
 8001122:	1cc4      	adds	r4, r0, #3
 8001124:	f024 0403 	bic.w	r4, r4, #3
 8001128:	42a0      	cmp	r0, r4
 800112a:	d0f8      	beq.n	800111e <sbrk_aligned+0x22>
 800112c:	1a21      	subs	r1, r4, r0
 800112e:	4628      	mov	r0, r5
 8001130:	f000 f9be 	bl	80014b0 <_sbrk_r>
 8001134:	3001      	adds	r0, #1
 8001136:	d1f2      	bne.n	800111e <sbrk_aligned+0x22>
 8001138:	e7ef      	b.n	800111a <sbrk_aligned+0x1e>
 800113a:	bf00      	nop
 800113c:	200001c0 	.word	0x200001c0

08001140 <_malloc_r>:
 8001140:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001144:	1ccd      	adds	r5, r1, #3
 8001146:	f025 0503 	bic.w	r5, r5, #3
 800114a:	3508      	adds	r5, #8
 800114c:	2d0c      	cmp	r5, #12
 800114e:	bf38      	it	cc
 8001150:	250c      	movcc	r5, #12
 8001152:	2d00      	cmp	r5, #0
 8001154:	4606      	mov	r6, r0
 8001156:	db01      	blt.n	800115c <_malloc_r+0x1c>
 8001158:	42a9      	cmp	r1, r5
 800115a:	d904      	bls.n	8001166 <_malloc_r+0x26>
 800115c:	230c      	movs	r3, #12
 800115e:	6033      	str	r3, [r6, #0]
 8001160:	2000      	movs	r0, #0
 8001162:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001166:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800123c <_malloc_r+0xfc>
 800116a:	f000 f869 	bl	8001240 <__malloc_lock>
 800116e:	f8d8 3000 	ldr.w	r3, [r8]
 8001172:	461c      	mov	r4, r3
 8001174:	bb44      	cbnz	r4, 80011c8 <_malloc_r+0x88>
 8001176:	4629      	mov	r1, r5
 8001178:	4630      	mov	r0, r6
 800117a:	f7ff ffbf 	bl	80010fc <sbrk_aligned>
 800117e:	1c43      	adds	r3, r0, #1
 8001180:	4604      	mov	r4, r0
 8001182:	d158      	bne.n	8001236 <_malloc_r+0xf6>
 8001184:	f8d8 4000 	ldr.w	r4, [r8]
 8001188:	4627      	mov	r7, r4
 800118a:	2f00      	cmp	r7, #0
 800118c:	d143      	bne.n	8001216 <_malloc_r+0xd6>
 800118e:	2c00      	cmp	r4, #0
 8001190:	d04b      	beq.n	800122a <_malloc_r+0xea>
 8001192:	6823      	ldr	r3, [r4, #0]
 8001194:	4639      	mov	r1, r7
 8001196:	4630      	mov	r0, r6
 8001198:	eb04 0903 	add.w	r9, r4, r3
 800119c:	f000 f988 	bl	80014b0 <_sbrk_r>
 80011a0:	4581      	cmp	r9, r0
 80011a2:	d142      	bne.n	800122a <_malloc_r+0xea>
 80011a4:	6821      	ldr	r1, [r4, #0]
 80011a6:	4630      	mov	r0, r6
 80011a8:	1a6d      	subs	r5, r5, r1
 80011aa:	4629      	mov	r1, r5
 80011ac:	f7ff ffa6 	bl	80010fc <sbrk_aligned>
 80011b0:	3001      	adds	r0, #1
 80011b2:	d03a      	beq.n	800122a <_malloc_r+0xea>
 80011b4:	6823      	ldr	r3, [r4, #0]
 80011b6:	442b      	add	r3, r5
 80011b8:	6023      	str	r3, [r4, #0]
 80011ba:	f8d8 3000 	ldr.w	r3, [r8]
 80011be:	685a      	ldr	r2, [r3, #4]
 80011c0:	bb62      	cbnz	r2, 800121c <_malloc_r+0xdc>
 80011c2:	f8c8 7000 	str.w	r7, [r8]
 80011c6:	e00f      	b.n	80011e8 <_malloc_r+0xa8>
 80011c8:	6822      	ldr	r2, [r4, #0]
 80011ca:	1b52      	subs	r2, r2, r5
 80011cc:	d420      	bmi.n	8001210 <_malloc_r+0xd0>
 80011ce:	2a0b      	cmp	r2, #11
 80011d0:	d917      	bls.n	8001202 <_malloc_r+0xc2>
 80011d2:	1961      	adds	r1, r4, r5
 80011d4:	42a3      	cmp	r3, r4
 80011d6:	6025      	str	r5, [r4, #0]
 80011d8:	bf18      	it	ne
 80011da:	6059      	strne	r1, [r3, #4]
 80011dc:	6863      	ldr	r3, [r4, #4]
 80011de:	bf08      	it	eq
 80011e0:	f8c8 1000 	streq.w	r1, [r8]
 80011e4:	5162      	str	r2, [r4, r5]
 80011e6:	604b      	str	r3, [r1, #4]
 80011e8:	4630      	mov	r0, r6
 80011ea:	f000 f82f 	bl	800124c <__malloc_unlock>
 80011ee:	f104 000b 	add.w	r0, r4, #11
 80011f2:	1d23      	adds	r3, r4, #4
 80011f4:	f020 0007 	bic.w	r0, r0, #7
 80011f8:	1ac2      	subs	r2, r0, r3
 80011fa:	bf1c      	itt	ne
 80011fc:	1a1b      	subne	r3, r3, r0
 80011fe:	50a3      	strne	r3, [r4, r2]
 8001200:	e7af      	b.n	8001162 <_malloc_r+0x22>
 8001202:	6862      	ldr	r2, [r4, #4]
 8001204:	42a3      	cmp	r3, r4
 8001206:	bf0c      	ite	eq
 8001208:	f8c8 2000 	streq.w	r2, [r8]
 800120c:	605a      	strne	r2, [r3, #4]
 800120e:	e7eb      	b.n	80011e8 <_malloc_r+0xa8>
 8001210:	4623      	mov	r3, r4
 8001212:	6864      	ldr	r4, [r4, #4]
 8001214:	e7ae      	b.n	8001174 <_malloc_r+0x34>
 8001216:	463c      	mov	r4, r7
 8001218:	687f      	ldr	r7, [r7, #4]
 800121a:	e7b6      	b.n	800118a <_malloc_r+0x4a>
 800121c:	461a      	mov	r2, r3
 800121e:	685b      	ldr	r3, [r3, #4]
 8001220:	42a3      	cmp	r3, r4
 8001222:	d1fb      	bne.n	800121c <_malloc_r+0xdc>
 8001224:	2300      	movs	r3, #0
 8001226:	6053      	str	r3, [r2, #4]
 8001228:	e7de      	b.n	80011e8 <_malloc_r+0xa8>
 800122a:	230c      	movs	r3, #12
 800122c:	4630      	mov	r0, r6
 800122e:	6033      	str	r3, [r6, #0]
 8001230:	f000 f80c 	bl	800124c <__malloc_unlock>
 8001234:	e794      	b.n	8001160 <_malloc_r+0x20>
 8001236:	6005      	str	r5, [r0, #0]
 8001238:	e7d6      	b.n	80011e8 <_malloc_r+0xa8>
 800123a:	bf00      	nop
 800123c:	200001c4 	.word	0x200001c4

08001240 <__malloc_lock>:
 8001240:	4801      	ldr	r0, [pc, #4]	@ (8001248 <__malloc_lock+0x8>)
 8001242:	f7ff bf10 	b.w	8001066 <__retarget_lock_acquire_recursive>
 8001246:	bf00      	nop
 8001248:	200001bc 	.word	0x200001bc

0800124c <__malloc_unlock>:
 800124c:	4801      	ldr	r0, [pc, #4]	@ (8001254 <__malloc_unlock+0x8>)
 800124e:	f7ff bf0b 	b.w	8001068 <__retarget_lock_release_recursive>
 8001252:	bf00      	nop
 8001254:	200001bc 	.word	0x200001bc

08001258 <__sflush_r>:
 8001258:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800125c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800125e:	0716      	lsls	r6, r2, #28
 8001260:	4605      	mov	r5, r0
 8001262:	460c      	mov	r4, r1
 8001264:	d454      	bmi.n	8001310 <__sflush_r+0xb8>
 8001266:	684b      	ldr	r3, [r1, #4]
 8001268:	2b00      	cmp	r3, #0
 800126a:	dc02      	bgt.n	8001272 <__sflush_r+0x1a>
 800126c:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800126e:	2b00      	cmp	r3, #0
 8001270:	dd48      	ble.n	8001304 <__sflush_r+0xac>
 8001272:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8001274:	2e00      	cmp	r6, #0
 8001276:	d045      	beq.n	8001304 <__sflush_r+0xac>
 8001278:	2300      	movs	r3, #0
 800127a:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800127e:	682f      	ldr	r7, [r5, #0]
 8001280:	6a21      	ldr	r1, [r4, #32]
 8001282:	602b      	str	r3, [r5, #0]
 8001284:	d030      	beq.n	80012e8 <__sflush_r+0x90>
 8001286:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8001288:	89a3      	ldrh	r3, [r4, #12]
 800128a:	0759      	lsls	r1, r3, #29
 800128c:	d505      	bpl.n	800129a <__sflush_r+0x42>
 800128e:	6863      	ldr	r3, [r4, #4]
 8001290:	1ad2      	subs	r2, r2, r3
 8001292:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8001294:	b10b      	cbz	r3, 800129a <__sflush_r+0x42>
 8001296:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8001298:	1ad2      	subs	r2, r2, r3
 800129a:	2300      	movs	r3, #0
 800129c:	4628      	mov	r0, r5
 800129e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80012a0:	6a21      	ldr	r1, [r4, #32]
 80012a2:	47b0      	blx	r6
 80012a4:	1c43      	adds	r3, r0, #1
 80012a6:	89a3      	ldrh	r3, [r4, #12]
 80012a8:	d106      	bne.n	80012b8 <__sflush_r+0x60>
 80012aa:	6829      	ldr	r1, [r5, #0]
 80012ac:	291d      	cmp	r1, #29
 80012ae:	d82b      	bhi.n	8001308 <__sflush_r+0xb0>
 80012b0:	4a28      	ldr	r2, [pc, #160]	@ (8001354 <__sflush_r+0xfc>)
 80012b2:	410a      	asrs	r2, r1
 80012b4:	07d6      	lsls	r6, r2, #31
 80012b6:	d427      	bmi.n	8001308 <__sflush_r+0xb0>
 80012b8:	2200      	movs	r2, #0
 80012ba:	6062      	str	r2, [r4, #4]
 80012bc:	6922      	ldr	r2, [r4, #16]
 80012be:	04d9      	lsls	r1, r3, #19
 80012c0:	6022      	str	r2, [r4, #0]
 80012c2:	d504      	bpl.n	80012ce <__sflush_r+0x76>
 80012c4:	1c42      	adds	r2, r0, #1
 80012c6:	d101      	bne.n	80012cc <__sflush_r+0x74>
 80012c8:	682b      	ldr	r3, [r5, #0]
 80012ca:	b903      	cbnz	r3, 80012ce <__sflush_r+0x76>
 80012cc:	6560      	str	r0, [r4, #84]	@ 0x54
 80012ce:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80012d0:	602f      	str	r7, [r5, #0]
 80012d2:	b1b9      	cbz	r1, 8001304 <__sflush_r+0xac>
 80012d4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80012d8:	4299      	cmp	r1, r3
 80012da:	d002      	beq.n	80012e2 <__sflush_r+0x8a>
 80012dc:	4628      	mov	r0, r5
 80012de:	f7ff fec5 	bl	800106c <_free_r>
 80012e2:	2300      	movs	r3, #0
 80012e4:	6363      	str	r3, [r4, #52]	@ 0x34
 80012e6:	e00d      	b.n	8001304 <__sflush_r+0xac>
 80012e8:	2301      	movs	r3, #1
 80012ea:	4628      	mov	r0, r5
 80012ec:	47b0      	blx	r6
 80012ee:	4602      	mov	r2, r0
 80012f0:	1c50      	adds	r0, r2, #1
 80012f2:	d1c9      	bne.n	8001288 <__sflush_r+0x30>
 80012f4:	682b      	ldr	r3, [r5, #0]
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d0c6      	beq.n	8001288 <__sflush_r+0x30>
 80012fa:	2b1d      	cmp	r3, #29
 80012fc:	d001      	beq.n	8001302 <__sflush_r+0xaa>
 80012fe:	2b16      	cmp	r3, #22
 8001300:	d11d      	bne.n	800133e <__sflush_r+0xe6>
 8001302:	602f      	str	r7, [r5, #0]
 8001304:	2000      	movs	r0, #0
 8001306:	e021      	b.n	800134c <__sflush_r+0xf4>
 8001308:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800130c:	b21b      	sxth	r3, r3
 800130e:	e01a      	b.n	8001346 <__sflush_r+0xee>
 8001310:	690f      	ldr	r7, [r1, #16]
 8001312:	2f00      	cmp	r7, #0
 8001314:	d0f6      	beq.n	8001304 <__sflush_r+0xac>
 8001316:	0793      	lsls	r3, r2, #30
 8001318:	bf18      	it	ne
 800131a:	2300      	movne	r3, #0
 800131c:	680e      	ldr	r6, [r1, #0]
 800131e:	bf08      	it	eq
 8001320:	694b      	ldreq	r3, [r1, #20]
 8001322:	1bf6      	subs	r6, r6, r7
 8001324:	600f      	str	r7, [r1, #0]
 8001326:	608b      	str	r3, [r1, #8]
 8001328:	2e00      	cmp	r6, #0
 800132a:	ddeb      	ble.n	8001304 <__sflush_r+0xac>
 800132c:	4633      	mov	r3, r6
 800132e:	463a      	mov	r2, r7
 8001330:	4628      	mov	r0, r5
 8001332:	6a21      	ldr	r1, [r4, #32]
 8001334:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 8001338:	47e0      	blx	ip
 800133a:	2800      	cmp	r0, #0
 800133c:	dc07      	bgt.n	800134e <__sflush_r+0xf6>
 800133e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001342:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001346:	f04f 30ff 	mov.w	r0, #4294967295
 800134a:	81a3      	strh	r3, [r4, #12]
 800134c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800134e:	4407      	add	r7, r0
 8001350:	1a36      	subs	r6, r6, r0
 8001352:	e7e9      	b.n	8001328 <__sflush_r+0xd0>
 8001354:	dfbffffe 	.word	0xdfbffffe

08001358 <_fflush_r>:
 8001358:	b538      	push	{r3, r4, r5, lr}
 800135a:	690b      	ldr	r3, [r1, #16]
 800135c:	4605      	mov	r5, r0
 800135e:	460c      	mov	r4, r1
 8001360:	b913      	cbnz	r3, 8001368 <_fflush_r+0x10>
 8001362:	2500      	movs	r5, #0
 8001364:	4628      	mov	r0, r5
 8001366:	bd38      	pop	{r3, r4, r5, pc}
 8001368:	b118      	cbz	r0, 8001372 <_fflush_r+0x1a>
 800136a:	6a03      	ldr	r3, [r0, #32]
 800136c:	b90b      	cbnz	r3, 8001372 <_fflush_r+0x1a>
 800136e:	f7ff fc95 	bl	8000c9c <__sinit>
 8001372:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001376:	2b00      	cmp	r3, #0
 8001378:	d0f3      	beq.n	8001362 <_fflush_r+0xa>
 800137a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800137c:	07d0      	lsls	r0, r2, #31
 800137e:	d404      	bmi.n	800138a <_fflush_r+0x32>
 8001380:	0599      	lsls	r1, r3, #22
 8001382:	d402      	bmi.n	800138a <_fflush_r+0x32>
 8001384:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8001386:	f7ff fe6e 	bl	8001066 <__retarget_lock_acquire_recursive>
 800138a:	4628      	mov	r0, r5
 800138c:	4621      	mov	r1, r4
 800138e:	f7ff ff63 	bl	8001258 <__sflush_r>
 8001392:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8001394:	4605      	mov	r5, r0
 8001396:	07da      	lsls	r2, r3, #31
 8001398:	d4e4      	bmi.n	8001364 <_fflush_r+0xc>
 800139a:	89a3      	ldrh	r3, [r4, #12]
 800139c:	059b      	lsls	r3, r3, #22
 800139e:	d4e1      	bmi.n	8001364 <_fflush_r+0xc>
 80013a0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80013a2:	f7ff fe61 	bl	8001068 <__retarget_lock_release_recursive>
 80013a6:	e7dd      	b.n	8001364 <_fflush_r+0xc>

080013a8 <__swhatbuf_r>:
 80013a8:	b570      	push	{r4, r5, r6, lr}
 80013aa:	460c      	mov	r4, r1
 80013ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80013b0:	4615      	mov	r5, r2
 80013b2:	2900      	cmp	r1, #0
 80013b4:	461e      	mov	r6, r3
 80013b6:	b096      	sub	sp, #88	@ 0x58
 80013b8:	da0c      	bge.n	80013d4 <__swhatbuf_r+0x2c>
 80013ba:	89a3      	ldrh	r3, [r4, #12]
 80013bc:	2100      	movs	r1, #0
 80013be:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80013c2:	bf14      	ite	ne
 80013c4:	2340      	movne	r3, #64	@ 0x40
 80013c6:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80013ca:	2000      	movs	r0, #0
 80013cc:	6031      	str	r1, [r6, #0]
 80013ce:	602b      	str	r3, [r5, #0]
 80013d0:	b016      	add	sp, #88	@ 0x58
 80013d2:	bd70      	pop	{r4, r5, r6, pc}
 80013d4:	466a      	mov	r2, sp
 80013d6:	f000 f849 	bl	800146c <_fstat_r>
 80013da:	2800      	cmp	r0, #0
 80013dc:	dbed      	blt.n	80013ba <__swhatbuf_r+0x12>
 80013de:	9901      	ldr	r1, [sp, #4]
 80013e0:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80013e4:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80013e8:	4259      	negs	r1, r3
 80013ea:	4159      	adcs	r1, r3
 80013ec:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80013f0:	e7eb      	b.n	80013ca <__swhatbuf_r+0x22>

080013f2 <__smakebuf_r>:
 80013f2:	898b      	ldrh	r3, [r1, #12]
 80013f4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80013f6:	079d      	lsls	r5, r3, #30
 80013f8:	4606      	mov	r6, r0
 80013fa:	460c      	mov	r4, r1
 80013fc:	d507      	bpl.n	800140e <__smakebuf_r+0x1c>
 80013fe:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8001402:	6023      	str	r3, [r4, #0]
 8001404:	6123      	str	r3, [r4, #16]
 8001406:	2301      	movs	r3, #1
 8001408:	6163      	str	r3, [r4, #20]
 800140a:	b003      	add	sp, #12
 800140c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800140e:	466a      	mov	r2, sp
 8001410:	ab01      	add	r3, sp, #4
 8001412:	f7ff ffc9 	bl	80013a8 <__swhatbuf_r>
 8001416:	9f00      	ldr	r7, [sp, #0]
 8001418:	4605      	mov	r5, r0
 800141a:	4639      	mov	r1, r7
 800141c:	4630      	mov	r0, r6
 800141e:	f7ff fe8f 	bl	8001140 <_malloc_r>
 8001422:	b948      	cbnz	r0, 8001438 <__smakebuf_r+0x46>
 8001424:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001428:	059a      	lsls	r2, r3, #22
 800142a:	d4ee      	bmi.n	800140a <__smakebuf_r+0x18>
 800142c:	f023 0303 	bic.w	r3, r3, #3
 8001430:	f043 0302 	orr.w	r3, r3, #2
 8001434:	81a3      	strh	r3, [r4, #12]
 8001436:	e7e2      	b.n	80013fe <__smakebuf_r+0xc>
 8001438:	89a3      	ldrh	r3, [r4, #12]
 800143a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800143e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001442:	81a3      	strh	r3, [r4, #12]
 8001444:	9b01      	ldr	r3, [sp, #4]
 8001446:	6020      	str	r0, [r4, #0]
 8001448:	b15b      	cbz	r3, 8001462 <__smakebuf_r+0x70>
 800144a:	4630      	mov	r0, r6
 800144c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001450:	f000 f81e 	bl	8001490 <_isatty_r>
 8001454:	b128      	cbz	r0, 8001462 <__smakebuf_r+0x70>
 8001456:	89a3      	ldrh	r3, [r4, #12]
 8001458:	f023 0303 	bic.w	r3, r3, #3
 800145c:	f043 0301 	orr.w	r3, r3, #1
 8001460:	81a3      	strh	r3, [r4, #12]
 8001462:	89a3      	ldrh	r3, [r4, #12]
 8001464:	431d      	orrs	r5, r3
 8001466:	81a5      	strh	r5, [r4, #12]
 8001468:	e7cf      	b.n	800140a <__smakebuf_r+0x18>
	...

0800146c <_fstat_r>:
 800146c:	b538      	push	{r3, r4, r5, lr}
 800146e:	2300      	movs	r3, #0
 8001470:	4d06      	ldr	r5, [pc, #24]	@ (800148c <_fstat_r+0x20>)
 8001472:	4604      	mov	r4, r0
 8001474:	4608      	mov	r0, r1
 8001476:	4611      	mov	r1, r2
 8001478:	602b      	str	r3, [r5, #0]
 800147a:	f7fe ffd3 	bl	8000424 <_fstat>
 800147e:	1c43      	adds	r3, r0, #1
 8001480:	d102      	bne.n	8001488 <_fstat_r+0x1c>
 8001482:	682b      	ldr	r3, [r5, #0]
 8001484:	b103      	cbz	r3, 8001488 <_fstat_r+0x1c>
 8001486:	6023      	str	r3, [r4, #0]
 8001488:	bd38      	pop	{r3, r4, r5, pc}
 800148a:	bf00      	nop
 800148c:	200001b8 	.word	0x200001b8

08001490 <_isatty_r>:
 8001490:	b538      	push	{r3, r4, r5, lr}
 8001492:	2300      	movs	r3, #0
 8001494:	4d05      	ldr	r5, [pc, #20]	@ (80014ac <_isatty_r+0x1c>)
 8001496:	4604      	mov	r4, r0
 8001498:	4608      	mov	r0, r1
 800149a:	602b      	str	r3, [r5, #0]
 800149c:	f7fe ffd1 	bl	8000442 <_isatty>
 80014a0:	1c43      	adds	r3, r0, #1
 80014a2:	d102      	bne.n	80014aa <_isatty_r+0x1a>
 80014a4:	682b      	ldr	r3, [r5, #0]
 80014a6:	b103      	cbz	r3, 80014aa <_isatty_r+0x1a>
 80014a8:	6023      	str	r3, [r4, #0]
 80014aa:	bd38      	pop	{r3, r4, r5, pc}
 80014ac:	200001b8 	.word	0x200001b8

080014b0 <_sbrk_r>:
 80014b0:	b538      	push	{r3, r4, r5, lr}
 80014b2:	2300      	movs	r3, #0
 80014b4:	4d05      	ldr	r5, [pc, #20]	@ (80014cc <_sbrk_r+0x1c>)
 80014b6:	4604      	mov	r4, r0
 80014b8:	4608      	mov	r0, r1
 80014ba:	602b      	str	r3, [r5, #0]
 80014bc:	f7fe ffd8 	bl	8000470 <_sbrk>
 80014c0:	1c43      	adds	r3, r0, #1
 80014c2:	d102      	bne.n	80014ca <_sbrk_r+0x1a>
 80014c4:	682b      	ldr	r3, [r5, #0]
 80014c6:	b103      	cbz	r3, 80014ca <_sbrk_r+0x1a>
 80014c8:	6023      	str	r3, [r4, #0]
 80014ca:	bd38      	pop	{r3, r4, r5, pc}
 80014cc:	200001b8 	.word	0x200001b8

080014d0 <_init>:
 80014d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80014d2:	bf00      	nop
 80014d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80014d6:	bc08      	pop	{r3}
 80014d8:	469e      	mov	lr, r3
 80014da:	4770      	bx	lr

080014dc <_fini>:
 80014dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80014de:	bf00      	nop
 80014e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80014e2:	bc08      	pop	{r3}
 80014e4:	469e      	mov	lr, r3
 80014e6:	4770      	bx	lr
